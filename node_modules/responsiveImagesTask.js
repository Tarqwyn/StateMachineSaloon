var fs = require('fs'),
cheerio = require('cheerio'),
model = require('model'),
ncp = require('ncp'),
compareImageTask = require('compareImageTask');
 
function ResponsiveImagesTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var $ = model.$, el;
	// var taskFlow = [promptUser, sanityCheckFolder, lookForPicsInShorthand, copyNewFiles, deleteOldFiles, modifyHtmlCss];
	var taskFlow = [promptUser, sanityCheckFolder, lookForPicsInShHtml, compareImagesToSupplieddirectory, copyImagesIntoShorthand, addCss];
	var currentSubTask = 0;
	var currentfileCopying = 0;
	var picsFolderPath;
	var inputBtnMarkup = "<input id=\"folderBrowseInput\" class=\"folderBrowseInput\" type=\"file\" nwdirectory/>" +
						"<button id=\"folderBrowseButton\" class=\"folderBrowseButton\" type=\"submit\">" +
							"<img src=\"../assets/images/browseFolderIcon.png\">" +
							"<p style=\"display:inline-block;\">browse folders</p>" +
						"</button>";
	var fileSafety;
	var filesWithNoMatches = [];
	var filesToCopy = [];
	var shorthandFilesToRemove = {};
	var imagesToWorkWith = [];
	var basefileNameRegex = /_phonePortrait|_phoneLandscape|_tabletPortrait|_tabletLandscape|_largeDesktop|_extraLargeDesktop|.jpg|.jpeg|.gif|.png|.svg/gi;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		$ = $ || model.$;

		var $el = $('.toolholder');

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/

		/*---------------
			Things to do:
			 * prompt the user for the location of the folder with the replacement images in
				* sanity check the folder that the user provides
				* copy the contents of the folder into the 'media/responsiveImgs' directory
				* replace the relevant style tags (media queries) in the index.html file
		---------------*/

		taskFlow[0]();

		console.log("TODO responsive images task: SVG images!!, old browsers that don't support media queries, check the number of hhtp requests for the images, handle error states especially in the 'modifyHtmlCss' sub task");

	}
	this.go = go;

	function promptUser() {

		var promptMarkup = "<div class=\"userPromptHolder\">" +
								"<p>" +
									"<b>Responsive images:</b>" +
								"</p>" +
								"<p>Please select the directory where the alternative responsive images are. The images should have the file name structure:" +
								"</br>" +
									"<b>ch_{chapterNumber}_{sectionNumber}_{image size label}.jpg</b>" +
								"</br>" +
								"</br>" +
								"Possible image labels are:" +
								"</br>" +
									"<b>phoneportrait</b> (0-399px)" +
								"</br>" +
									"<b>phonelandscape</b> (400-755px)" +
								"</br>" +
									"<b>tabletportrait</b> (756-1100px)" +
								"</br>" +
									"<b>tabletlandscape</b> (1101-1399px)" +
								"</br>" +
									"<b>largedesktop</b> (1400-1899px)" +
								"</br>" +
									"<b>extralargedesktop</b> (1900-infinity!px)" +
								"</br>" +
								"</br>" +
								"You can provide images at any size for these breakpoints, but it makes sense to keep them the same as the maximum break point value. An example directory might have the following files inside it:" +
								"</br>" +
								"ch_1_1_phoneportrait.jpg" +
								"</br>" +
								"ch_1_1_phonelandscape.jpg" +
								"</br>" +
								"ch_1_1_tabletportrait.jpg" +
								"</br>" +
								"ch_1_1_tabletlandscape.jpg" +
								"</br>" +
								"ch_1_1_largedesktop.jpg" +
								"</br>" +
								"ch_1_1_extralargedesktop.jpg" +
								"</br>" +
								"</p>" +
							"</div>";

		var alertHolder = $el.append(promptMarkup);
		var holder = $('.userPromptHolder');
		holder.append(inputBtnMarkup);

		$('#folderBrowseButton').on('click', browseBtnClickHandler);

		$("#folderBrowseInput").change(function(evt) {
			dirChangeHandler($(this).val());
		});
	}

	function browseBtnClickHandler() {
		$("#folderBrowseInput").trigger('click');
	}

	function dirChangeHandler(val) {
		picsFolderPath = val;
		subTaskComplete();
		$('#folderBrowseButton').off('click', browseBtnClickHandler);
	}

	function sanityCheckFolder() {
		//check to see if the pic names in the choosen folder match the images in the shorthand directory

		/*-------------------
			Message strings
		-------------------*/
		var noReadDirWarningMsg = "<p>" +
									"<b>Responsive images:</b>" +
								"</p>" +
								"<p class=\"alertText\">" +
									"Couldn't read the directory that you selected, please try again" +
								"</p>";
		var nofilesWarningMsg = "<p>" +
									"<b>Responsive images:</b>" +
								"</p>" +
								"<p class=\"alertText\">" +
									"There don't seem to be any files in the folder that you provided" +
								"</p>";
		var noSafeFilesWarningMsg = "<p>" +
									"<b>Responsive images:</b>" +
								"</p>" +
								"<p class=\"alertText\">" +
									"There doesn't seem to be any images in the folder that you provided of the correct format." +
									"</br>" +
									"Safe image formats are:" +
									"</br>" +
									".jpg" +
									"</br>" +
									".jpeg" +
									"</br>" +
									".gif" +
									"</br>" +
									".png" +
									"</br>" +
									".svg" +
								"</p>";

		var files;
		try {
			files = fs.readdirSync(picsFolderPath);
		}
		catch(e) {
			throwResetWarning(noReadDirWarningMsg);
			return e;
		}
		if (files.length > 0) {
			//loop through the files and check the safe list of file extensions
			fileSafety = returnSafeUnsafeFiles(files);
			if (fileSafety.safe.length) {
				//we have some safe files to work with
				subTaskComplete();
			}
			else {
				//there aren't any safe files in the directory
				throwResetWarning(noSafeFilesWarningMsg);
			}
		}
		else {
			throwResetWarning(nofilesWarningMsg);
		}
		
	}

	function lookForPicsInShorthand() {
		//fileSafety
		/*---------------
			Things to do:
			 * check the safe list of files with the files in the shorthand 
				output directory, if they match then you can copy the files
				over and edit the index.html files css witht he new image
				breakpoint info!
			 * if any of the images don't match then you can throw a warning
				to the user to prompt them to continue or choose another 
				folder
			 * check to see if there are any files in the unsafe list, if
				there are then you need to throw a warning to the user and
				pompt them to confirm that they want to continue or choose 
				another folder
		---------------*/
		var nofilesToCopyWarningMsg = "<p>" +
									"<b>Responsive images:</b>" +
								"</p>" +
								"<p class=\"alertText\">" +
									"There don't seem to be any files that I can copy over to shorthand. Please check that the images in shorthand and the new images in the folder you provided follow the same naming convention. You'll have to choose the directory again..." +
								"</p>";

		var nonMatchingfilesWarningMsg = "<p>" +
									"<b>Responsive images:</b>" +
								"</p>" +
								"<p class=\"alertText\">" +
									"There are some images in the folder you provided that don't match any of the files already in the shorthand output. if you'd like to continue anyway then click continue, or hit the 'browse folders' to select the directory again when you are ready. The files in question are:" +
								"</p>";

		var baseShorthandfileNames = {};
		
		var existingPics = fs.readdirSync(model.outputFolderPath + model.outputImagesPath);
		var a, arrLength = existingPics.length;
		for (a = 0; a < arrLength; a++) {
			var safeShorthandBaseFileName = existingPics[a].replace(basefileNameRegex, "").trim();
			if (!baseShorthandfileNames[safeShorthandBaseFileName]) {
				baseShorthandfileNames[safeShorthandBaseFileName] = 1;
			}
		}

		arrLength = fileSafety.safe.length;
		for (a = 0; a < arrLength; a++) {
			var safeFileNameWithoutLabel = fileSafety.safe[a].replace(basefileNameRegex, "").trim();
			if (baseShorthandfileNames[safeFileNameWithoutLabel]) {
				filesToCopy.push(fileSafety.safe[a]);
				if (!shorthandFilesToRemove[safeFileNameWithoutLabel]) {
					shorthandFilesToRemove[safeFileNameWithoutLabel] = 1;
				}
			}
			else {
				//can't find a matching file in the shorthand output folder
				filesWithNoMatches.push(fileSafety.safe[a]);
			}
		}

		if (filesToCopy.length) {
			if (!filesWithNoMatches.length) {
				subTaskComplete();
			}
			else{
				//there are some files in here without any matches in shorthand
				var filesWithNoMatchesStr = "";
				arrLength = filesWithNoMatches.length;
				for (a = 0; a < arrLength; a++) {
					filesWithNoMatchesStr += ("<p>" + filesWithNoMatches[a] + "</p>");
				}
				throwResetOrContinueWarning(nonMatchingfilesWarningMsg + filesWithNoMatchesStr);
			}
		}
		else {
			//no files to copy ... probably a discrepancy between the file names in the folder provided and the shorthand output directory
			throwResetWarning(nofilesToCopyWarningMsg);
		}

	}

	function lookForPicsInShHtml() {
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var $ = cheerio.load(indexHtmlStr);
			var styleTags = $('style');
			//Loop through all the script tags in the page
			var a, arrLength = styleTags.length;
			for (a = 0; a < arrLength; a++) {
				if (styleTags[a]) {
					var styleTag = styleTags[a];
					if (styleTag.children.length == 1) {
						var styleTagStr = styleTag.children[0].data;
						if ((styleTagStr.indexOf("background-image: url(") + 1)) {
							var targetStyleObj = {};
							var firstdotIndex = styleTagStr.indexOf(".");
							var firstOpenBraceIndex = styleTagStr.indexOf(" {");
							
							targetStyleObj.className = styleTagStr.substring(firstdotIndex, firstOpenBraceIndex);

							var firstUrlStartIndex = styleTagStr.indexOf("background-image: url(") + 22;
							var firstUrlEndIndex =  styleTagStr.indexOf(")");
							var completeFileName = styleTagStr.substring(firstUrlStartIndex, firstUrlEndIndex);

							targetStyleObj.imageName = completeFileName.substring(completeFileName.lastIndexOf('/') + 1, completeFileName.length);

							imagesToWorkWith.push(targetStyleObj);

							//remove the style tag from the html file ... we'll add the css back into the common css file later
							$(styleTag).remove();
						}
					}
				}
			}

			// //write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', $.html(), subTaskComplete);

		});
	}

	function compareImagesToSupplieddirectory() {
		/*
		* imagesToWorkWith:Array of objects
		* 	imagesToWorkWith[a]:
		* 		.className
		* 		.imageName
		*/

		$('.userPromptHolder').hide();

		var suppliedFileNamesArr = fs.readdirSync(picsFolderPath);
		suppliedFileNamesArr = tidyUpFilesArr(suppliedFileNamesArr);

		var fullOrigPathsArr = [];
		var a, arrLength = suppliedFileNamesArr.length;
		for (a = 0; a < arrLength; a++) {
			fullOrigPathsArr.push(picsFolderPath + "/" + suppliedFileNamesArr[a]);
		}

		//imagesToWorkWith
		var imageIndex = 0;
		compareImage();

		function compareImage() {
			if (imageIndex < imagesToWorkWith.length) {
				var imageToWorkWith = imagesToWorkWith[imageIndex];
				//I'm checking the image here!
				//pass the function imageToWorkWith[imageIndex].imageName as the base file and suppliedFilesArr as the files array!
				// imageToWorkWith.replacementImgs = [
				// 	{
				// 		imageName:"yo.jpg",
				// 		queryRule:"@media(min-width maxWidth blah)"
				// 	}
				// ];
				//compareImage();

				/////////////////////
				var firstImagePath = model.outputFolderPath + model.outputImagesPath + "/" + imageToWorkWith.imageName;
				
				compareImageTask.compare(firstImagePath, fullOrigPathsArr, function(equalityComparisons) {
					var topResult = equalityComparisons[0][0];
					if (topResult) {
						var fileName = topResult.substring(topResult.lastIndexOf("/") + 1, topResult.length);
						var fileNameWithoutImageLabel = fileName.substring(0, fileName.lastIndexOf("_"));

						//lets see which break point sizes are available for this image!
						var a, arrLength = model.imageLabels.length;
						for (a = 0; a < arrLength; a++) {

							var imagePath = picsFolderPath + "/" + fileNameWithoutImageLabel + "_" + model.imageLabels[a] + ".jpg";
							if (fs.existsSync(imagePath)) {
								imageToWorkWith.replacementImgs = imageToWorkWith.replacementImgs || [];
								imageToWorkWith.replacementImgs.push({
									imageName: fileName,
									rootPath: picsFolderPath + "/",
									queryString: model.imageLabelMediaQueryLookup[model.imageLabels[a]]
								});
							}
						}
						
					}
					else {
						console.log("ERROR: I can't find a matching image for: " + firstImagePath + " in the supplied images directory");
					}
					compareImage();
				});
				/////////////////////
			}
			else {
				subTaskComplete();
			}

		}
	}

	function copyImagesIntoShorthand() {
		var responsiveImgsFolderPath = model.outputFolderPath + model.outputImagesPath + "/responsiveImgs";
		if (!fs.existsSync(responsiveImgsFolderPath)) {
			// Do something
			fs.mkdirSync(responsiveImgsFolderPath);
		}
		currentfileCopying = 0;
		copyImageIntoShorthand();
	}

	function copyImageIntoShorthand() {
		//imagesToWorkWith
		var responsiveImgsFolderPath = model.outputFolderPath + model.outputImagesPath + "/responsiveImgs";
		var imgName = imagesToWorkWith[currentfileCopying].replacementImgs.imageName;

		var imgToCopyPath = imagesToWorkWith[currentfileCopying].replacementImgs.rootPath + imgName;

		ncp(imgToCopyPath, responsiveImgsFolderPath + "/" + imgName, function (err) {
			if (err && err[0].errno !== 47) {
				//error number 47 is a warning that the output directory already exists
				return console.error("copy error: ", err);
			}
			else {
				//file copied successfully
				currentfileCopying ++;
				if (currentfileCopying < imagesToWorkWith.length) {
					copyFile();
				}
				else {
					subTaskComplete();
				}
			}
		});
	}

	function addCss() {
		//imagesToWorkWith
		//you can duplicated the media rule here as much as you like, it will get tidied up by the css parser task later on
		var responsiveImgsLocalFolderPath = "." + model.outputImagesPath + "/responsiveImgs";
		var additionalCssStr = "", a, arrLength = imagesToWorkWith.length;
		for (a = 0; a < arrLength; a++) {
			var b, arrBLength = imagesToWorkWith[a].replacementImgs.length;
			for (b = 0; b < arrBLength; b++) {
				var queryStr = imagesToWorkWith[a].replacementImgs[b].queryString;
				var fullImagePath = responsiveImgsLocalFolderPath + "/" + imagesToWorkWith[a].replacementImgs[b].imageName;
				additionalCssStr += (queryStr + " { ");
				additionalCssStr += (imagesToWorkWith[a].className + " { ");
				additionalCssStr += "background-image: url(";
				additionalCssStr += fullImagePath;
				additionalCssStr += "); } }";
			}
		}

		var cssFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
		readModuleFile(cssFilePath, function (err, cssStr) {
			if (err) {
				console.log("err = ", err);
			}

			cssStr += additionalCssStr;

			//write out the index string
			writeOutFile(cssFilePath, cssStr, subTaskComplete);

		});
	}

	function copyNewFiles() {
		//filesToCopy
		var responsiveImgsFolderPath = model.outputFolderPath + model.outputImagesPath + "/responsiveImgs";
		if (!fs.existsSync(responsiveImgsFolderPath)) {
			// Do something
			fs.mkdirSync(responsiveImgsFolderPath);
		}
		copyFile();
	}

	function copyFile() {
		var responsiveImgsFolderPath = model.outputFolderPath + model.outputImagesPath + "/responsiveImgs";

		var fileToCopy = picsFolderPath + "/" + filesToCopy[currentfileCopying];
		
		ncp(fileToCopy, responsiveImgsFolderPath + "/" + filesToCopy[currentfileCopying], function (err) {
			if (err && err[0].errno !== 47) {
				//error number 47 is a warning that the output directory already exists
				return console.error("copy error: ", err);
			}
			else {
				//file copied successfully
				currentfileCopying ++;
				if (currentfileCopying < filesToCopy.length) {
					copyFile();
				}
				else {
					subTaskComplete();
				}
			}
		});
	}

	function deleteOldFiles() {
		var a, arrLength = filesToCopy.length, baseFileNames = [];
		for (a = 0; a < arrLength; a++) {
			var baseFileName = filesToCopy[a].replace(basefileNameRegex, "").trim();
			baseFileNames.push(baseFileName);
		}

		var oldShorthandFiles = fs.readdirSync(model.outputFolderPath + model.outputImagesPath);
		arrLength = oldShorthandFiles.length;
		for (a = 0; a < arrLength; a++) {
			var oldFileName = oldShorthandFiles[a];
			//ignore any directopries in there, only list the files
			var isDir = fs.lstatSync(model.outputFolderPath + model.outputImagesPath + "/" + oldFileName).isDirectory();
			if (!isDir) {
				var b, baseNameArrLength = baseFileNames.length;
				innerLoop:for (b = 0; b < baseNameArrLength; b++) {
					var isMatch = oldFileName.indexOf(baseFileNames[b]) + 1;
					if (isMatch) {
						fs.unlinkSync(model.outputFolderPath + model.outputImagesPath + "/" + oldFileName);
						break innerLoop;
					}
				}
			}
		}

		subTaskComplete();

	}

	function modifyHtmlCss() {
		//filesToCopy
		//load index.html
		//loop through the base file names and locate the style tag that contains them
		//replace the media queries with the new ones based on all the sizes you have for that image!

		var a, b, arrLength = filesToCopy.length, baseFileNames = [];
		for (a = 0; a < arrLength; a++) {
			var baseFileName = filesToCopy[a].replace(basefileNameRegex, "").trim();
			baseFileNames.push(baseFileName);
		}
		//////////////////////////////////////////////////////
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var finalOutputStr = indexHtmlStr;

			var $ = cheerio.load(indexHtmlStr);
			var styleTagsHolder = $('.sections-list');
			if (!styleTagsHolder.length) {
				console.log("ERROR: I can't find the holding div with the class name 'sections-list'!");
				return;
			}
			var styleTags = $(styleTagsHolder[0]).find('style');
			if (!styleTags.length) {
				console.log("ERROR: I can't find the style tags");
				return;
			}
			var styleTagsStrArr = [];
			for (a = 0; a < styleTags.length; a++) {
				var styleTagstr = $(styleTags[a]).html();
				var styleTagObj = {};
				var baseFileNamesLength = filesToCopy.length;
				for (b = 0; b < baseFileNamesLength; b++) {
					var indexOfName = styleTagstr.indexOf(baseFileNames[b]) + 1;
					if (indexOfName) {
						styleTagObj.match = baseFileNames[b];
					}
				}
				styleTagObj.indexOf = indexHtmlStr.indexOf(styleTagstr);
				styleTagObj.str = styleTagstr;
				var dotIndex = styleTagstr.indexOf(".");
				styleTagObj.className = styleTagstr.substring(dotIndex, styleTagstr.indexOf(" ", dotIndex + 1));

				styleTagsStrArr.push(styleTagObj);
			}
			styleTagsStrArr.sort(function(a, b) {
				return b.indexOf - a.indexOf;
			});

			arrLength = styleTagsStrArr.length;
			for (a = 0; a < arrLength; a++) {
				if (styleTagsStrArr[a].match) {
					var matchedFiles = [];
					for (b = 0; b < filesToCopy.length; b++) {
						var fileIndexOf = filesToCopy[b].indexOf(styleTagsStrArr[a].match) + 1;
						if (fileIndexOf) {
							matchedFiles.push(filesToCopy[b]);
						}
					}
					//matchedfiles is the list of files (images) that need adding to the styleTagsStrArr[a] style tag! (styleTagsStrArr[a].str)
					//replace styleTagsStrArr[a].str with the new constructed style tag!!
					var newStyleMarkup = "<style>\n";
					for (b = 0; b < matchedFiles.length; b++) {
						var imageFileName = matchedFiles[b];
						var imageLabel = imageFileName.substring(imageFileName.lastIndexOf("_") + 1, imageFileName.lastIndexOf("."));
						
						newStyleMarkup += model.imageLabelMediaQueryLookup[imageLabel];
						newStyleMarkup += " {\n";
						newStyleMarkup += styleTagsStrArr[a].className;
						newStyleMarkup += " {\n";
						newStyleMarkup += "background-image: url(.";
						newStyleMarkup += (model.outputImagesPath + "/responsiveImgs/");
						newStyleMarkup += (imageFileName + ");\n");
						newStyleMarkup += "}\n";
						newStyleMarkup += "}\n";
					}
					newStyleMarkup += "</style>\n";

					//replace styleTagsStrArr[a].str with newStyleMarkup in indexHtmlStr
					finalOutputStr = finalOutputStr.replace(styleTagsStrArr[a].str, newStyleMarkup);
				}

			}

			// //write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', finalOutputStr, subTaskComplete);

		});
		//////////////////////////////////////////////////////

	}

	function throwResetOrContinueWarning(warningMsg) {
		$('.userPromptHolder').empty();
		$('.userPromptHolder').append(warningMsg);

		var continueBtnMarkup = "<button id=\"continueButton\" class=\"folderBrowseButton\" type=\"submit\">" +
									"<p style=\"display:inline-block;\">continue</p>" +
								"</button>";

		$('.userPromptHolder').append(continueBtnMarkup);
		$('#continueButton').on('click', continueBtnClickHandler);
		
		resetFolderChioce();
	}

	function continueBtnClickHandler() {
		subTaskComplete();
	}

	function throwResetWarning(warningMsg) {
		$('.userPromptHolder').empty();
		$('.userPromptHolder').append(warningMsg);
		resetFolderChioce();
	}

	function resetFolderChioce() {
		currentSubTask = 0;

		var holder = $('.userPromptHolder');
		holder.append(inputBtnMarkup);

		$('#folderBrowseButton').on('click', browseBtnClickHandler);

		$("#folderBrowseInput").change(function(evt) {
			dirChangeHandler($(this).val());
		});
	}

	function returnSafeUnsafeFiles(files) {
		/*******************************************************************************
			checks the file extension against a safe list in the model and returns an 
			object with 2 properties called safe and unsafe both arrays of file names
		*******************************************************************************/
		var a, arrLength = files.length, safeFiles = [], unsafeFiles = [];
		for (a = 0; a < arrLength; a++) {
			var fileName = files[a];
			var indexOfDot = fileName.lastIndexOf(".");
			if (indexOfDot < 0) {
				continue;
			}
			var fileExstension = fileName.substring(indexOfDot, fileName.length);
			if (model.acceptableImageFormats[fileExstension]) {
				safeFiles.push(fileName);
			}
			else {
				if (!model.unacceptableIgnoreFormats[fileExstension]) {
					unsafeFiles.push(fileName);
				}
			}
		}
		return {safe:safeFiles, unsafe:unsafeFiles};
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function tidyUpFilesArr(arr) {
		var a, arrLength = arr.length;
		for (a = arrLength - 1; a >= 0; a--) {
			if (arr[a].match(".DS_Store")) {
				arr.splice(a, 1);
			}
		}
		return arr;
	}

	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		//remove the pop up window
		$('.userPromptHolder').remove();
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't write to file: " + filePath);
		}
		else {
			callback();
		}
	});
}

}
 
module.exports = new ResponsiveImagesTask();