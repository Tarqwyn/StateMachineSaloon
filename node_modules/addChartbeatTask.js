var fs = require('fs'),
ncp = require('ncp'),
cheerio = require('cheerio'),
model;
 
function AddChartbeatTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [addHeadScript, addBodyScript, promptForNameAndPath, updateNameAndPath];
	var currentSubTask = 0;
	var projectName, indexHtmlPath;
	var $;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		console.log('add chartbeat');

		model = require('model');
		$ = $ || model.$;
		var $el = $('.toolholder');

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/
		// model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);

		/*---------------
			Things to do:
			 * add js script tag to the head
			 * add the main chartbeat js script tag to the end of the body
		---------------*/

		taskFlow[0]();

	}
	this.go = go;

	function addHeadScript() {
		var scriptTagStr = "\n<script type=\"text/javascript\">var _sf_startpt=(new Date()).getTime()</script>";
		//add this script as high up in the head as you can
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			var $ = cheerio.load(indexHtmlStr);
			//find the script tag for the story js file and the require/boot script tag on a line before that
			
			var metaTags = $('meta');
			if (metaTags.length) {
				$(metaTags[metaTags.length - 1]).after(scriptTagStr);
				var indexFileOutputStr = $.html();
				writeOutFile(model.outputFolderPath + '/index.html', indexFileOutputStr, subTaskComplete);
			}
			else {
				console.log("ERROR; can't find and meta tags in the html file");
			}

		});
	}

	function addBodyScript() {
		
		var chartbeatMarkupPath = model.localAssetsPath + model.markupPath + "/chartbeat.html";
		var chartbeatInitStr = fs.readFileSync(chartbeatMarkupPath, 'utf8');

		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			var $ = cheerio.load(indexHtmlStr);
			//find the script tag for the story js file and the require/boot script tag on a line before that
			$('body').append(chartbeatInitStr);
			//final index.html string output
			var indexFileOutputStr = $.html();
			//write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', indexFileOutputStr, subTaskComplete);

		});
	}

	function promptForNameAndPath() {
		var promptMarkup = "<div class=\"userPromptHolder\">" +
								"<p>" +
									"<b>chartbeat story name:</b>" +
									"<p>Please paste the story name here.</br>For example, the story name for the 'Arms wide open' story was: 'Arms wide open'</p>" +
								"</p>" +
								"<input id='storyName' type='text' value='The Reykjavik Confessions' style='display:block;'/>" +
								"<p>" +
									"<b>chartbeat index html path:</b>" +
									"<p>Please paste the index.html path here.</br>For example, the index.html path for the 'Arms wide open' story was: '/news/special/2014/newsspec_7141/index.html'</p>" +
								"</p>" +
								"<input id='indexHtmlPath' type='text' value='/news/special/2014/newsspec_7617/index.html' style='display:block;'/>" +
								"<button id='promptOkButton' type='submit'>" +
								"<p>ok</p>" +
								"</button>" +
							"</div>";

		var alertHolder = $el.append(promptMarkup);

		$('#promptOkButton').on('click', promptOkBtnClickHandler);
	}

	function promptOkBtnClickHandler(e) {
		projectName = $('#storyName').val();
		indexHtmlPath = $('#indexHtmlPath').val();

		//remove the prompt window
		$('.userPromptHolder').remove();

		subTaskComplete();
	}

	function updateNameAndPath() {
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			
			indexHtmlStr = indexHtmlStr.strReplace("chartBeatStoryTitle", projectName);
			indexHtmlStr = indexHtmlStr.strReplace("chartBeatIndexHtmlPath", indexHtmlPath);

			//write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', indexHtmlStr, subTaskComplete);

		});
	}

	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't write file " + filePath + " :s");
		}
		else {
			callback();
		}
	});
}

}
 
module.exports = new AddChartbeatTask();