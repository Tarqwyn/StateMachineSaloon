var fs = require('fs'),
cheerio = require('cheerio'),
ncp = require('ncp'),
model = require('model');
 
function CopyResponsivePolyfillTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [
		copyJsLibFile,
		addScriptTagToHtml
	];
	var currentSubTask = 0;

	var htmlFilePath;
	var jsLibName = "css3-mediaqueries.js";//http://code.google.com/p/css3-mediaqueries-js/
	//respond.min.js -- this was tj original library I used which only supports min and max width

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		htmlFilePath = model.outputFolderPath + '/index.html';

		taskFlow[0]();

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/
		// model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);

		console.log("TODO copy media query polyfil task:");

	}
	this.go = go;

	function copyJsLibFile() {
		var requireLibPath = model.localAssetsPath + model.jsLibPath + "/" + jsLibName;
		var outputDir = model.outputFolderPath + "/lib";
		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}
		
		//copy the require lib into the new lib directory
		ncp(requireLibPath, outputDir + "/" + jsLibName, function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}
			
			subTaskComplete();

		});
	}

	function addScriptTagToHtml() {
		var scriptStr = "<script src=\"lib/" + jsLibName + "\"></script>\n";

		console.log("htmlFilePath = ", htmlFilePath);

		readModuleFile(htmlFilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			var $ = cheerio.load(indexHtmlStr);
			//find the script tag for the story js file and the require/boot script tag on a line before that
			$('head').append(scriptStr);
			//final index.html string output
			var indexFileOutputStr = $.html();
			//write out the index string
			writeOutFile(htmlFilePath, indexFileOutputStr, subTaskComplete);

		});
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "ERROR: problem writing file: " + filePath);
		}
		else {
			callback();
		}
	});
}

}
 
module.exports = new CopyResponsivePolyfillTask();