var eventEmitter = require('eventEmitter'),
removeGoogleAnalyticsTask = require('removeGoogleAnalyticsTask'),
addiStatsTask = require('addiStatsTask'),
addChartbeatTask = require('addChartbeatTask'),
bbcHeaderTask = require('bbcHeaderTask'),
bbcFooterTask = require('bbcFooterTask'),
addShareToolsTask = require('addShareToolsTask'),
responsiveImagesTask = require('responsiveImagesTask'),
bbcVideoTask = require('bbcVideoTask'),
bbcQuotesTask = require('bbcQuotesTask');

var instance = null;

function Model(){
	if(instance !== null){
		throw new Error("Cannot instantiate more than one Model, use Model.getInstance()");
	}
}

Model.prototype = {

		/*------------------------------------------------------------------
			APP STATES
		------------------------------------------------------------------*/
		appStates: {
			IDLE:"idle",
			START:"start",
			ERROR_STATE:"gotoErrorState",
			CHECK_SHORTHAND_FOLDER:"checkShortHandFolder",
			CHOOSE_OUTPUT_DIRECTORY:"chooseOutputDirectory",
			COPY_INPUT_INTO_OUTPUT:"copyInputIntoOutput",
			DISPLAY_CHANGE_OPTIONS:"displaychangeOptions",
			PROCESS_ARTICLE:"processArticle",
			REMOVE_GOOGLE_ANALYTICS:"removeGoogleAnalytics",
			ADD_ISTATS:"addIstats",
			ADD_CHARTBEAT:"addChartbeat",
			ADD_BBC_HEADER:"addBBCHeader",
			ADD_BBC_FOOTER:"addBBCFooter",
			ADD_RESPONSIVE_IMAGES:"addResponsiveImages"
		},

		/*------------------------------------------------------------------
			Variables
		------------------------------------------------------------------*/
		eventEmitter: new eventEmitter(),
		isFullscreen:false,
		appTitleTemplate: undefined,
		inputFolderPath:undefined,
		outputFolderPath:undefined,
		projectNumber:undefined,
		setableOptionsArr:[],
		bbcVideosExist:false,
		optionsObj:{},
		localAssetsPath: "./assets",
		staticPath:"./static",
		jsLibPath: "/jsLib",
		jsPath: "/js",
		cssPath: "/css",
		fontsPath: "/fonts",
		imagesPath: "/images",
		markupPath: "/markup",
		outputImagesPath: '/media',
		acceptableImageFormats: {
			'.jpg': 1,
			'.jpeg': 1,
			'.gif': 1,
			'.png': 1,
			'.svg': 1
		},
		unacceptableIgnoreFormats: {
			'.DS_STORE': 1,
			'.DS_Store': 1,
			'.lock': 1,
			'.swp': 1,
			'.out': 1
		},
		imageLabels: [
			"largedesktoplandscape",
			"desktoplandscape",
			"tabletlandscape",
			"smalltabletlandscape",
			"phonelandscape",
			"smallphonelandscape",
			"desktopportrait",
			"smalldesktopportrait",
			"tabletportrait",
			"smalltabletportrait",
			"phoneportrait",
			"smallphoneportrait"
		],
		imageLabelMediaQueryLookup: {
			largedesktoplandscape: "@media (min-width: 1900px) and (max-height: 1900px)",
			desktoplandscape: "@media (min-width: 1500px) and (max-width: 1899px) and (orientation: landscape)",
			tabletlandscape: "@media (min-width: 1000px) and (max-width: 1499px) and (orientation: landscape)",
			smalltabletlandscape: "@media (min-width: 666px) and (max-width: 999px) and (orientation: landscape)",
			phonelandscape: "@media (min-width: 321px) and (max-width: 665px) and (orientation: landscape)",
			smallphonelandscape: "@media (max-width: 320px) and (orientation: landscape)",
			desktopportrait: "@media (min-width: 1201px) and (min-height: 1201px)",
			smalldesktopportrait: "@media (min-width: 901px) and (max-width: 1200px) and (orientation: portrait)",
			tabletportrait: "@media (min-width: 756px) and (max-width: 900px) and (orientation: portrait)",
			smalltabletportrait: "@media (min-width: 534px) and (max-width: 755px) and (orientation: portrait)",
			phoneportrait: "@media (min-width: 321px) and (max-width: 533px) and (orientation: portrait)",
			smallphoneportrait: "@media (max-width: 320px) and (orientation: portrait)"
		},
		titleFontSizeChanges: [
			{
				from:'font-size:35px',
				to:'font-size:40px'
			},
			{
				from:'font-size:84px',
				to:'font-size:56px'
			},
			{
				from:'font-size:105px',
				to:'font-size:72px'
			},
			{
				from:'font-size:120px',
				to:'font-size:96px'
			}
		],
		processTasks: [
			{
				name: "remove google analytics",
				id: "googleAnalyticsCheckbox",
				stateName:"removeGoogleAnalytics",
				acceptableStates: [
					"processArticle"
				],
				checked:"checked",
				stateMethod:removeGoogleAnalyticsTask.go
			},
			{
				name: "add bbc video",
				id: "bbcVideoCheckbox",
				stateName:"addBBCVideo",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
				],
				checked:"checked",
				stateMethod:bbcVideoTask.go
			},
			{
				name: "add istats",
				id: "istatsCheckbox",
				stateName:"addIstats",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
				],
				checked:"checked",
				stateMethod:addiStatsTask.go
			},
			{
				name: "add chartbeat",
				id: "chartbeatCheckbox",
				stateName:"addChartbeat",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats"
				],
				checked:"checked",
				stateMethod:addChartbeatTask.go
			},
			{
				name: "add bbc header",
				id: "bbcHeaderCheckbox",
				stateName:"addBBCHeader",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat"
				],
				checked:"",
				stateMethod:bbcHeaderTask.go
			},
			{
				name: "add bbc footer",
				id: "bbcFooterCheckbox",
				stateName:"addBBCFooter",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCHeader"
				],
				checked:"checked",
				stateMethod:bbcFooterTask.go
			},
			{
				name: "add share tools",
				id: "shareToolsCheckbox",
				stateName:"addShareTools",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCHeader",
					"addBBCFooter"
				],
				checked:"checked",
				stateMethod:addShareToolsTask.go
			},
			{
				name: "add responsive images",
				id: "respnosiveImagesCheckbox",
				stateName:"addResponsiveImages",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCHeader",
					"addBBCFooter",
					"addShareTools"
				],
				checked:"",
				stateMethod:responsiveImagesTask.go
			},
			{
				name: "add bbc quotes",
				id: "bbcQuotesCheckbox",
				stateName:"addBBCQuotes",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCHeader",
					"addBBCFooter",
					"addShareTools",
					"addResponsiveImages"
				],
				checked:"checked",
				stateMethod:bbcQuotesTask.go
			}
		],

		//fs.readdirSync(localJsLibPath)

		/*------------------------------------------------------------------
			Event strings
		------------------------------------------------------------------*/
		emitterEvents: {
			ERROR:"error",
			ARTICLE_TASK_COMPLETE:"articleTaskComplete"
		},

		/*------------------------------------------------------------------
			State machine
		------------------------------------------------------------------*/
		stateMachine: (function() {

			this.addTransition = function(targetState, passableStates, targetFunction) {
				this.stateMap = this.stateMap || {};
				this.stateMap[targetState] = {
					passableStates:passableStates,
					targetFunction:targetFunction
				};
			};

			this.publishStateChange = function(stateName, args) {
				
				//model instance
				var model = Model.getInstance();

				//check to see if we can go to the propsed state
				var stateMapTransitionObj = this.stateMap[stateName];
				if (stateMapTransitionObj) {
					var statePass = false, a, arrLength = stateMapTransitionObj.passableStates.length;
					for (a = 0; a < arrLength; a++) {
						if (this.currentState === stateMapTransitionObj.passableStates[a] || stateMapTransitionObj.passableStates[a] == "*") {
							statePass = true;
							this.stateUpdated(stateName);
							stateMapTransitionObj.targetFunction(args);
							break;
						}
					}
					if (!statePass) {
						model.eventEmitter.emitEvent(model.emitterEvents.ERROR, ["You can't transition to state " + stateName + " from state " + this.currentState]);
					}
				}
				else {
					// this.throwError("AHHH! can't find the state that you are trying to transition to");
					model.eventEmitter.emitEvent(model.emitterEvents.ERROR, ["AHHH! can't find the state that you are trying to transition to"]);
				}
			};

			this.stateUpdated = function(newStateName) {
				this.currentState = newStateName;
			};

			this.currentState = "idle";

			return this;
		})(),

		/*------------------------------------------------------------------
			Methods
		------------------------------------------------------------------*/
		aMethod:function() {
			console.log("a method has been called");

		},

		////////////////
		/*------------------------------------------------------------------
			UTILITIES
		------------------------------------------------------------------*/
		makeTemplate:function(str) {
			return function ( data ) {
				var substitute = function ( match, substring ) {
					var result = '';
					eval( 'with ( data ) { result = ' + substring + ' ; }' );
					return result;
				};

				return str.replace( /<%=([\s\S]+?)%>/g, substitute );
			};
		}
		////////////////
	};
	
	Model.getInstance = function(){
		//Gets an instance of the singleton. It is better to use 
		if(instance === null){
			instance = new Model();
		}
		return instance;
	};

	module.exports = Model.getInstance();

	String.prototype.strReplace = function(needle, replacement) {return this.split(needle).join(replacement||"");};
