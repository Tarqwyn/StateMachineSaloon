var eventEmitter = require('eventEmitter'),
removeGoogleAnalyticsTask = require('removeGoogleAnalyticsTask'),
addiStatsTask = require('addiStatsTask'),
addChartbeatTask = require('addChartbeatTask'),
addOrbScrollTask = require('addOrbScrollTask'),
bbcFooterTask = require('bbcFooterTask'),
addShareToolsTask = require('addShareToolsTask'),
bbcVideoTask = require('bbcVideoTask'),
createHeaderIncludeTask = require('createHeaderIncludeTask'),
securityCheckTask = require('securityCheckTask'),
createBodyIncludeTask = require('createBodyIncludeTask'),
ChangePathstoCDNTask = require('changePathsToCDNTask'),
bbcQuotesTask = require('bbcQuotesTask');

var instance = null;

function Model(){
	if(instance !== null){
		throw new Error("Cannot instantiate more than one Model, use Model.getInstance()");
	}
}

Model.prototype = {

		/*------------------------------------------------------------------
			APP STATES
		------------------------------------------------------------------*/
		appStates: {
			IDLE:"idle",
			START:"start",
			ERROR_STATE:"gotoErrorState",
			CHECK_SHORTHAND_FOLDER:"checkShortHandFolder",
			CHOOSE_OUTPUT_DIRECTORY:"chooseOutputDirectory",
			COPY_INPUT_INTO_OUTPUT:"copyInputIntoOutput",
			DISPLAY_CHANGE_OPTIONS:"displaychangeOptions",
			PROCESS_ARTICLE:"processArticle",
			REMOVE_GOOGLE_ANALYTICS:"removeGoogleAnalytics",
			ADD_ISTATS:"addIstats",
			ADD_CHARTBEAT:"addChartbeat",
			ADD_ORBSCROLL:"addOrbScroll",
			ADD_BBC_FOOTER:"addBBCFooter",
			CREATE_HEAD_INCLUDE:"createHeadInclude",
			CREATE_BODY_INCLUDE:"createBodyInclude"
		},

		/*------------------------------------------------------------------
			Variables
		------------------------------------------------------------------*/
		eventEmitter: new eventEmitter(),
		isFullscreen:false,
		appTitleTemplate: undefined,
		inputFolderPath:undefined,
		outputFolderPath:undefined,
		projectNumber:undefined, // this is really the incremented number from shorthand used to break the cache
		jiraNumber: undefined,
		yearPublished:undefined,
		setableOptionsArr:[],
		bbcVideosExist:false,
		optionsObj:{},
		localAssetsPath: "./assets",
		staticPath:"./static",
		jsLibPath: "/jsLib",
		jsPath: "/js",
		cssPath: "/css",
		fontsPath: "/fonts",
		imagesPath: "/images",
		markupPath: "/markup",
		outputImagesPath: '/media',
		acceptableImageFormats: {
			'.jpg': 1,
			'.jpeg': 1,
			'.gif': 1,
			'.png': 1,
			'.svg': 1
		},
		unacceptableIgnoreFormats: {
			'.DS_STORE': 1,
			'.DS_Store': 1,
			'.lock': 1,
			'.swp': 1,
			'.out': 1
		},
		titleFontSizeChanges: [
			{
				from:'font-size:35px',
				to:'font-size:40px'
			},
			{
				from:'font-size:84px',
				to:'font-size:56px'
			},
			{
				from:'font-size:105px',
				to:'font-size:72px'
			},
			{
				from:'font-size:120px',
				to:'font-size:96px'
			}
		],
		whitelist: [
			"www.facebook.com",
			"twitter.com",
			"emp.bbci.co.uk",
			"static.bbci.co.uk",
			"playlists.bbc.co.uk",
			"news.bbcimg.co.uk",
			"www.bbc.co.uk",
			"static.chartbeat.com"
		],
		processTasks: [
			{
				name: "remove google analytics",
				id: "googleAnalyticsCheckbox",
				stateName:"removeGoogleAnalytics",
				acceptableStates: [
					"processArticle"
				],
				checked:"checked",
				stateMethod:removeGoogleAnalyticsTask.go
			},
			{
				name: "add bbc video",
				id: "bbcVideoCheckbox",
				stateName:"addBBCVideo",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
				],
				checked:"checked",
				stateMethod:bbcVideoTask.go
			},
			{
				name: "add istats",
				id: "istatsCheckbox",
				stateName:"addIstats",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
				],
				checked:"checked",
				stateMethod:addiStatsTask.go
			},
			{
				name: "add chartbeat",
				id: "chartbeatCheckbox",
				stateName:"addChartbeat",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats"
				],
				checked:"checked",
				stateMethod:addChartbeatTask.go
			},
			{
				name: "add orbscroll",
				id: "orbscrollCheckbox",
				stateName:"addOrbScroll",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addChartbeat",
					"addIstats"
				],
				checked:"checked",
				stateMethod:addOrbScrollTask.go
			},
			{
				name: "add bbc footer",
				id: "bbcFooterCheckbox",
				stateName:"addBBCFooter",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addOrbScroll",
					"addChartbeat"
				],
				checked:"checked",
				stateMethod:bbcFooterTask.go
			},
			{
				name: "add share tools",
				id: "shareToolsCheckbox",
				stateName:"addShareTools",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCFooter"
				],
				checked:"checked",
				stateMethod:addShareToolsTask.go
			},
			{
				name: "add bbc quotes",
				id: "bbcQuotesCheckbox",
				stateName:"addBBCQuotes",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCFooter",
					"addShareTools"
				],
				checked:"checked",
				stateMethod:bbcQuotesTask.go
			},
			{
				name: "Security Check Task",
				id:   "bbcSecurityCheckTask",
				stateName: "securityCheckTask",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCFooter",
					"addShareTools",
					"addBBCQuotes"
				],
				checked: "checked",
				stateMethod: securityCheckTask.go
			},
			{
				name: "Change assets to CDN",
				id:   "bbcChangePathsToCDNTask",
				stateName: "changePathsToCDNTask",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCFooter",
					"addShareTools",
					"securityCheckTask",
					"addBBCQuotes"
				],
				checked: "checked",
				stateMethod: ChangePathstoCDNTask.go
			},
			{
				name: "Create head include",
				id:   "bbcCreateHeadInclude",
				stateName: "createHeadInclude",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCFooter",
					"addShareTools",
					"addBBCQuotes",
					"changePathsToCDNTask",
					"securityCheckTask",
					"createBodyInclude"
				],
				checked: "checked",
				stateMethod: createHeaderIncludeTask.go
			},
			{
				name: "Create body include",
				id:   "bbcCreateBodyInclude",
				stateName: "createBodyInclude",
				acceptableStates: [
					"processArticle",
					"removeGoogleAnalytics",
					"addBBCVideo",
					"addIstats",
					"addChartbeat",
					"addBBCFooter",
					"addShareTools",
					"addBBCQuotes",
					"changePathsToCDNTask",
					"securityCheckTask",
					"createHeadInclude"
				],
				checked: "checked",
				stateMethod: createBodyIncludeTask.go
			}
		],

		//fs.readdirSync(localJsLibPath)

		/*------------------------------------------------------------------
			Event strings
		------------------------------------------------------------------*/
		emitterEvents: {
			ERROR:"error",
			ARTICLE_TASK_COMPLETE:"articleTaskComplete"
		},

		/*------------------------------------------------------------------
			State machine
		------------------------------------------------------------------*/
		stateMachine: (function() {

			this.addTransition = function(targetState, passableStates, targetFunction) {
				this.stateMap = this.stateMap || {};
				this.stateMap[targetState] = {
					passableStates:passableStates,
					targetFunction:targetFunction
				};
			};

			this.publishStateChange = function(stateName, args) {
				
				//model instance
				var model = Model.getInstance();

				//check to see if we can go to the propsed state
				var stateMapTransitionObj = this.stateMap[stateName];
				if (stateMapTransitionObj) {
					var statePass = false, a, arrLength = stateMapTransitionObj.passableStates.length;
					for (a = 0; a < arrLength; a++) {
						if (this.currentState === stateMapTransitionObj.passableStates[a] || stateMapTransitionObj.passableStates[a] == "*") {
							statePass = true;
							this.stateUpdated(stateName);
							stateMapTransitionObj.targetFunction(args);
							break;
						}
					}
					if (!statePass) {
						model.eventEmitter.emitEvent(model.emitterEvents.ERROR, ["You can't transition to state " + stateName + " from state " + this.currentState]);
					}
				}
				else {
					// this.throwError("AHHH! can't find the state that you are trying to transition to");
					model.eventEmitter.emitEvent(model.emitterEvents.ERROR, ["AHHH! can't find the state that you are trying to transition to"]);
				}
			};

			this.stateUpdated = function(newStateName) {
				this.currentState = newStateName;
			};

			this.currentState = "idle";

			return this;
		})(),

		/*------------------------------------------------------------------
			Methods
		------------------------------------------------------------------*/
		aMethod:function() {
			console.log("a method has been called");

		},

		promptUserForJiraNumber: function () {
			if (!this.jiraNumber) {
				this.jiraNumber = window.prompt('Jira ticket number please (e.g. 0000)');
			}
		},

		promptUserForYearPublished: function () {
			if (!this.yearPublished) {
				this.yearPublished = window.prompt('what year is this shorthand published in? (e.g. 2015)');
			}
		},

		/*------------------------------------------------------------------
			UTILITIES
		------------------------------------------------------------------*/
		makeTemplate:function(str) {
			return function ( data ) {
				var substitute = function ( match, substring ) {
					var result = '';
					eval( 'with ( data ) { result = ' + substring + ' ; }' );
					return result;
				};

				return str.replace( /<%=([\s\S]+?)%>/g, substitute );
			};
		}
	};
	
	Model.getInstance = function(){
		//Gets an instance of the singleton. It is better to use 
		if(instance === null){
			instance = new Model();
		}
		return instance;
	};

	module.exports = Model.getInstance();

	String.prototype.strReplace = function(needle, replacement) {return this.split(needle).join(replacement||"");};
