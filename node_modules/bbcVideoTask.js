var fs = require('fs'),
ncp = require('ncp'),
cheerio = require('cheerio'),
model;
 
function AddChartbeatTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [lookForVideoHooks];
	var currentSubTask = 0;
	var projectName, indexHtmlPath;
	var $;
	var vidsToAdd = [];

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		model = require('model');
		$ = $ || model.$;
		var $el = $('.toolholder');

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/

		/*---------------
			Things to do:
			 * look through the html file for the bbc video hook {{#bbcVideo}} and its closing tag {{/bbcVideo}} anything inbetween these tags is treated as the map page id/hook
				an example of a video hook might be: {{#bbcVideo}}news/science-environment-23296136{{/bbcVideo}}
			 * from the map page id/hook you should be able to construct the playlist xml path eg: http://playlists.bbc.co.uk/news/science-environment-23296136A/playlist.sxml

			For instructions on how to embed SMP video look here: 
			https://confluence.dev.bbc.co.uk/display/mp/Embedding+and+controlling+a+Standard+Media+Player

			and some setting info:
			https://confluence.dev.bbc.co.uk/display/mp/SMP+Settings+Object
		---------------*/

		taskFlow[0]();

	}
	this.go = go;

	function lookForVideoHooks() {
		console.log("lookForVideoHooks called");
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var regex = /{{#bbcVideo}}(.*?){{\/bbcVideo}}/gi;

			var foundMatches = indexHtmlStr.match(regex);

			console.log("foundMatches = ", foundMatches);

			var a, arrLength = foundMatches.length;
			for (a = 0; a < arrLength; a++) {
				var videoIdHook = foundMatches[a].substring(13, foundMatches[a].length - 13);
				var newDivId = "mediaPlayer" + a;
				vidsToAdd.push({
					playlistXmlPath: "http://playlists.bbc.co.uk/" + videoIdHook + "A/playlist.sxml",
					newDivId: newDivId
				});

				var divMarkup = "<div id=\"" + newDivId + "\" style=\"height:270px;width:480px\"></div>";
				indexHtmlStr = indexHtmlStr.strReplace(foundMatches[a], divMarkup);
			}

			console.log("vidsToAdd = ", vidsToAdd);

		});
	}

	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't write file " + filePath + " :s");
		}
		else {
			callback();
		}
	});
}

}
 
module.exports = new AddChartbeatTask();