var fs = require('fs'),
cheerio = require('cheerio'),
model = require('model'),
ncp = require('ncp'),
cheerio = require('cheerio');
 
function TextAnchoringTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	// var taskFlow = [copyRequireLib, copyIstatsLib, copyBootJs, addHtmlScript, addCallToStoryJs];
	var taskFlow = [copyJsLib, addHtmlScriptTag, replaceDivAttribs];
	var currentSubTask = 0;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/
		// model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);

		/*---------------
			Things to do:
			 * make a little require controller that loads istats and sets a global variable that can be accessed by the rest of the shorthand article (that isn't using amd modules)
				* copy the require library over to the shorthand article package
				* copy the istats library over
				* copy over the boot.js that require will load
				* add the require/boot script tag to the html file
				* TODO: pause the normal operation of the article until istats has loaded
			 * pause the article until istats has loaded and then re-initialise it again when ready
		---------------*/

		//taskFlow[0]();
		taskComplete();

		console.log("TODO: text anchoring task -- reedo the task simply by movining the aside tags around in the markup. ... create a ui so the user can choose where to put the images in the article");

	}
	this.go = go;

	function copyJsLib() {
		var jsLibPath = model.localAssetsPath + model.jsLibPath + "/text-anchoring-scrollmation.js";
		var outputDir = model.outputFolderPath + "/static/js";
		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}
		
		//copy the js lib into the new lib directory
		ncp(jsLibPath, outputDir + "/text-anchoring-scrollmation.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}
			
			subTaskComplete();

		});
	}

	function addHtmlScriptTag() {
		var scriptStr = "<script type=\"text/javascript\" src=\"./static/js/text-anchoring-scrollmation.js\"charset=\"utf-8\"></script>\n";

		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			var $ = cheerio.load(indexHtmlStr);
			//find the script tag for the story js file and the require/boot script tag on a line before that
			$('body').append(scriptStr);
			//final index.html string output
			var indexFileOutputStr = $.html();
			//write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', indexFileOutputStr, subTaskComplete);

		});
		
	}

	function replaceDivAttribs() {
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			
			var origAttribs = "column margin-left secondary-column position-static\" data-possible-scrollmation";
			var replaceWith = "column margin-left secondary-column position-static\" data-text-anchoring-scrollmation";
			indexHtmlStr = indexHtmlStr.strReplace(origAttribs, replaceWith);

			writeOutFile(model.outputFolderPath + '/index.html', indexHtmlStr, subTaskComplete);

		});
	}

	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't remove google analytics from the project");
		}
		else {
			callback();
		}
	});
}

}
 
module.exports = new TextAnchoringTask();