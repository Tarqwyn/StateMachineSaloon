var fs = require('fs'),
ncp = require('ncp'),
cheerio = require('cheerio'),
model;
 
function securityCheckTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [];
	var currentSubTask = 0;
	var $;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		model = require('model');
		$ = $ || model.$;
		var $el = $('.toolholder');
		var requestLog = './requests.txt';
		
		var shorthandOutput = model.inputFolderPath + '/index.html';
		

		var exec = require('child_process').exec;
		var requestStr = fs.readFileSync(requestLog, 'utf8');
		console.log(shorthandOutput);
		exec('phantomjs security.js ' + shorthandOutput, function (error, stdout, stderr) {
		  // output is in stdout
		});
		securityCheck(requestStr);
		

	}
	this.go = go;

	function promptForPermission(naughtyList) {
		var promptMarkup = "<div class=\"userPromptHolder\">" +
								naughtyList +
								"</br>" +
								"<button id='promptOkButton' type='submit'>" +
								"<p>ok</p>" +
								"</button>" +
								"<button id='promptNoButton' type='submit'>" +
								"<p>no</p>" +
								"</button>" +
							"</div>";

		console.log(promptMarkup);
		var alertHolder = $el.append(promptMarkup);

		$('#promptOkButton').on('click', promptOkBtnClickHandler);
		$('#promptNoButton').on('click', promptNoBtnClickHandler);
	}

	function securityCheck(indexHtmlStr) {
		var urlRegex = /((?:(http|https|Http|Https|rtsp|Rtsp):\/\/(?:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,64}(?:\:(?:[a-zA-Z0-9\$\-\_\.\+\!\*\'\(\)\,\;\?\&\=]|(?:\%[a-fA-F0-9]{2})){1,25})?\@)?)?((?:(?:[a-zA-Z0-9][a-zA-Z0-9\-]{0,64}\.)+(?:(?:aero|arpa|asia|a[cdefgilmnoqrstuwxz])|(?:biz|b[abdefghijmnorstvwyz])|(?:cat|com|coop|c[acdfghiklmnoruvxyz])|d[ejkmoz]|(?:edu|e[cegrstu])|f[ijkmor]|(?:gov|g[abdefghilmnpqrstuwy])|h[kmnrtu]|(?:info|int|i[delmnoqrst])|(?:jobs|j[emop])|k[eghimnrwyz]|l[abcikrstuvy]|(?:mil|mobi|museum|m[acdghklmnopqrstuvwxyz])|(?:name|net|n[acefgilopruz])|(?:org|om)|(?:pro|p[aefghklmnrstwy])|qa|r[eouw]|s[abcdeghijklmnortuvyz]|(?:tel|travel|t[cdfghjklmnoprtvwz])|u[agkmsyz]|v[aceginu]|w[fs]|y[etu]|z[amw]))|(?:(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9])\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[1-9]|0)\.(?:25[0-5]|2[0-4][0-9]|[0-1][0-9]{2}|[1-9][0-9]|[0-9])))(?:\:\d{1,5})?)(\/(?:(?:[a-zA-Z0-9\;\/\?\:\@\&\=\#\~\-\.\+\!\*\'\(\)\,\_])|(?:\%[a-fA-F0-9]{2}))*)?(?:\b|$)/ig;
		var domainRegex = /(?:www.)?([a-zA-Z0-9\-\.]+\.[a-zA-Z]{2,3})/; 
		var urls = indexHtmlStr.match(urlRegex);
		var domains = [];
		var nolikeyDomains = [];
		var naughtyList = "";
		for (var i = urls.length - 1; i >= 0; i--) {
			urls[i].match(domainRegex);
			if ( domains.indexOf(urls[i].match(domainRegex)[0]) == -1){
        		domains.push(urls[i].match(domainRegex)[0]);
    		}
		};
		console.log(domains);
		for (var i = domains.length - 1; i >= 0; i--) {
			if (model.whitelist.indexOf(domains[i]) == -1) {
				nolikeyDomains.push(domains[i]);
			}
		}
		if (nolikeyDomains.length > 0) {
			naughtyList += '<h2>Warning!!</h2></br><p>I have detected the following domains being referenced that are not on the accepted whitelist</p></br><p>You should only continue if you are happy the are legitimate</p></br>'
			for (var i = nolikeyDomains.length - 1; i >= 0; i--) {
				naughtyList += '<p>' + nolikeyDomains[i] + '</p>';
			};
			promptForPermission(naughtyList);
		}
	}

	function promptOkBtnClickHandler(e) {
		$('.userPromptHolder').remove();
		subTaskComplete();
	}

	function promptNoBtnClickHandler(e) {
		$('.userPromptHolder').remove();
		var errorMessage = "OK check the the Shorthand source code to see where this is coming from";
		model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, errorMessage);
	}


	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

}
 
module.exports = new securityCheckTask();