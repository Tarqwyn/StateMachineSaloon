var fs = require('fs'),
cheerio = require('cheerio'),
ncp = require('ncp'),
cheerio = require('cheerio'),
model;

function AddShareToolsTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [checkRequireLoaderBootScriptExists, checkRequireLibExists, copyEventEmitterLib, copyBootstrap, copyModel, copyView, editBootScript, promptForMessage, updateIndexShareMessage, updateBootShareMessage];
	var currentSubTask = 0, $, shareMessage, storyUrl;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		model = require('model');
		$ = $ || model.$;
		var $el = $('.toolholder');

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/
		// model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);

		/*---------------
			Things to do:
			 * Do stuff
		---------------*/

		taskFlow[0]();

	}
	this.go = go;

	function checkRequireLoaderBootScriptExists() {

		var bootjsPath = model.localAssetsPath + model.jsPath + "/boot.js";
		var outputDir = model.outputFolderPath + "/static/js";

		//check to see if the file exists, if not copy it over!
		if (!fs.existsSync(outputDir + "/boot.js")) {
			//copy the istats lib into the new lib directory
			ncp(bootjsPath, outputDir + "/boot.js", function (err) {
				if (err) {
					return console.error("copy error: ", err);
				}

				subTaskComplete();
			});
		}
		else {
			subTaskComplete();
		}
	}

	function checkRequireLibExists() {
		var requireLibPath = model.localAssetsPath + model.jsLibPath + "/require.js";
		var outputDir = model.outputFolderPath + "/lib";

		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}

		//check to see if the file exists, if not copy it over!
		if (!fs.existsSync(outputDir + "/require.js")) {
			//copy the require lib into the new lib directory
			ncp(requireLibPath, outputDir + "/require.js", function (err) {
				if (err) {
					return console.error("copy error: ", err);
				}

				subTaskComplete();

			});
		}
		else {
			subTaskComplete();
		}
	}

	function copyEventEmitterLib() {
		var emitterLibPath = model.localAssetsPath + model.jsLibPath + "/event_emitter.js";
		var outputDir = model.outputFolderPath + "/lib";
		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}

		//copy the require lib into the new lib directory
		ncp(emitterLibPath, outputDir + "/event_emitter.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			subTaskComplete();

		});
	}

	function copyBootstrap() {
		var bootjsPath = model.localAssetsPath + model.jsPath + "/bootstrap.js";
		var outputDir = model.outputFolderPath + "/static/js";

		//copy the istats lib into the new lib directory
		ncp(bootjsPath, outputDir + "/bootstrap.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			subTaskComplete();
		});
	}

	//copyModel, copyView
	function copyModel() {
		var bootjsPath = model.localAssetsPath + model.jsPath + "/nsshare-model.js";
		var outputDir = model.outputFolderPath + "/static/js";

		//copy the istats lib into the new lib directory
		ncp(bootjsPath, outputDir + "/nsshare-model.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			if (model.bbcVideosExist) {
				readModuleFile(outputDir + "/nsshare-model.js", function (err, scriptStr) {
					if (err) {
						console.log("err = ", err);
					}
					scriptStr = scriptStr.strReplace("define(['bootstrap'", "define(['static/js/bootstrap'");
					writeOutFile(outputDir + "/nsshare-model.js", scriptStr, subTaskComplete);
				});
			}
			else {
				subTaskComplete();
			}
		});
	}

	function copyView() {
		var bootjsPath = model.localAssetsPath + model.jsPath + "/nsshare-view.js";
		var outputDir = model.outputFolderPath + "/static/js";

		//copy the istats lib into the new lib directory
		ncp(bootjsPath, outputDir + "/nsshare-view.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			if (model.bbcVideosExist) {
				readModuleFile(outputDir + "/nsshare-view.js", function (err, scriptStr) {
					if (err) {
						console.log("err = ", err);
					}
					scriptStr = scriptStr.strReplace("define(['bootstrap'", "define(['static/js/bootstrap'");
					writeOutFile(outputDir + "/nsshare-view.js", scriptStr, subTaskComplete);
				});
			}
			else {
				subTaskComplete();
			}
		});
	}

	function editBootScript() {
		var bootScriptPath = model.outputFolderPath + "/static/js/boot.js";

		readModuleFile(bootScriptPath, function (err, bootScriptStr) {
			if (err) {
				console.log("err = ", err);
			}

			var defineOrRequire = (model.bbcVideosExist) ? "require([" : "define([";
			if (model.bbcVideosExist) {
				bootScriptStr = bootScriptStr.strReplace("define([", "require([");
			}

			//add path to define arr
			var defienArrStartIndex = bootScriptStr.indexOf(defineOrRequire), defineArrEndIndex = bootScriptStr.indexOf("]", defienArrStartIndex);
			var defineStr = bootScriptStr.substring(defienArrStartIndex + defineOrRequire.length, defineArrEndIndex);

			var moduleRootPath = (model.bbcVideosExist) ? "static/js/" : "";

			var istatsPathStr = (defineStr.length) ? ", '" + moduleRootPath + "bootstrap', '" + moduleRootPath + "nsshare-model', '" + moduleRootPath + "nsshare-view'" : "'" + moduleRootPath + "bootstrap', '" + moduleRootPath + "nsshare-model', '" + moduleRootPath + "nsshare-view'";
			defineStr += istatsPathStr;

			var defineStrPlusDeclaration = bootScriptStr.substring(defienArrStartIndex, defineArrEndIndex);

			bootScriptStr = bootScriptStr.strReplace(defineStrPlusDeclaration, defineOrRequire + defineStr);

			//add the share params to the function declaration
			var funcDecStartIndex = bootScriptStr.indexOf("function ("), functionDecEndIndex = bootScriptStr.indexOf(')', funcDecStartIndex);
			var funcParamsStr = bootScriptStr.substring(funcDecStartIndex + 10, functionDecEndIndex);
			var paramsStr = (funcParamsStr.length) ? ", news, NSShareModel, NSShareView" : "news, NSShareModel, NSShareView";
			funcParamsStr += paramsStr;
			var funcDecAndParamsStr = bootScriptStr.substring(funcDecStartIndex, functionDecEndIndex);
			bootScriptStr = bootScriptStr.strReplace(funcDecAndParamsStr, "function (" + funcParamsStr);

			var shareToolsMarkupPath = model.localAssetsPath + model.markupPath + "/shareTools.js";
			var shareToolsInitStr = fs.readFileSync(shareToolsMarkupPath, 'utf8');

			bootScriptStr = bootScriptStr.strReplace("/***insert share tools here***/", shareToolsInitStr);

			writeOutFile(bootScriptPath, bootScriptStr, subTaskComplete);

		});
	}

	function promptForMessage() {
		var promptMarkup = "<div class=\"userPromptHolder\">" +
								"<p>" +
									"<b>share message:</b>" +
									"<p>Please paste the share message here.</br>For example, the share message for the 'Arms wide open' story was: 'Arms wide open: The story behind Rio's Christ the Redeemer statue</p>" +
								"</p>" +
								"<input id='shareMessage' type='text' prompt='Share message' value='' style='display:block;'/>" +
								"<p>" +
							//		"<b>story page url:</b>" +
							//		"<p>Please paste url to the story here.</br>For example, the url for the 'Arms wide open' story was: 'http://www.bbc.co.uk/news/magazine-26354918'</p>" +
							//	"</p>" +
							//	"<input id='storyUrl' type='text' value='http://www.bbc.co.uk/news/magazine-27290883' style='display:block;'/>" +
								"<button id='promptOkButton' type='submit'>" +
								"<p>ok</p>" +
								"</button>" +
							"</div>";

		var alertHolder = $el.append(promptMarkup);

		$('#promptOkButton').on('click', promptOkBtnClickHandler);
	}

	function promptOkBtnClickHandler(e) {
		shareMessage = $('#shareMessage').val();
		storyUrl = $('#storyUrl').val();

		//remove the prompt window
		$('.userPromptHolder').remove();

		subTaskComplete();
	}

	function updateIndexShareMessage() {
		var escapedMessage = escape(shareMessage);
		var defualtMessage = "Arms wide open: The story behind Rio&apos;s Christ the Redeemer statue";
		var defualtEscapedMessage = "Arms%20wide%20open%3A%20The%20story%20behind%20Rio%27s%20Christ%20the%20Redeemer%20statue";

		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			//replace the facebook message
			indexHtmlStr = indexHtmlStr.strReplace(defualtEscapedMessage, escapedMessage);

			//replace the twitter message
			indexHtmlStr = indexHtmlStr.strReplace("text=" + defualtMessage, shareMessage);

			//replace the email story url
			indexHtmlStr = indexHtmlStr.strReplace("BBC%20Interactives%20http://www.bbc.co.uk/news/magazine-26354918", "BBC%20Interactives%20" + storyUrl);

			//replace the facebok story url
			indexHtmlStr = indexHtmlStr.strReplace("link=http://www.bbc.co.uk/news/magazine-26354918", "link=" + storyUrl);

			//replace the twitter story url
			indexHtmlStr = indexHtmlStr.strReplace("@BBCNewsMagazine http://www.bbc.co.uk/news/magazine-26354918", "@BBCNewsMagazine " + storyUrl);

			//write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', indexHtmlStr, subTaskComplete);

		});
	}

	function updateBootShareMessage() {
		var bootScriptPath = model.outputFolderPath + "/static/js/boot.js";

		readModuleFile(bootScriptPath, function (err, bootScriptStr) {
			if (err) {
				console.log("err = ", err);
			}

			//replace the share message
			var defualtMessage = "Arms wide open: The story behind Rio's Christ the Redeemer statue.";
			bootScriptStr = bootScriptStr.strReplace(defualtMessage, shareMessage);

			//replace the story page url
			var storyPageUrl = "http://www.bbc.co.uk/news/magazine-26354918";
			bootScriptStr = bootScriptStr.strReplace(storyPageUrl, storyUrl);

			//write out the boot js string
			writeOutFile(bootScriptPath, bootScriptStr, subTaskComplete);

		});
	}

	function updateNSShareModelMessage() {
		var nsShareModelScriptPath = model.outputFolderPath + "/static/js/nsshare-model.js";

		readModuleFile(nsShareModelScriptPath, function (err, nsShareScriptStr) {
			if (err) {
				console.log("err = ", err);
			}

			//replace the story page url
			//var storyPageUrl = "www.bbc.co.uk/news/magazine-26354918";
			//storyUrl = storyUrl.strReplace("http://", "");
			//nsShareScriptStr = nsShareScriptStr.strReplace(storyPageUrl, storyUrl);

			//write out the nsshare-model js string
			writeOutFile(nsShareModelScriptPath, nsShareScriptStr, subTaskComplete);

		});
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "error witing file: " + filePath);
		}
		else {
			callback();
		}
	});
}

}

module.exports = new AddShareToolsTask();