var fs = require('fs'),
cheerio = require('cheerio'),
ncp = require('ncp'),
model;

function AddShareToolsTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [
		checkRequireLoaderBootScriptExists,
		checkRequireLibExists,
		copyEventEmitterLib,
		copyBootstrap,
		copyUnderscore,
		copyModel,
		copyView,
		editBootScript,
		updateIndexShareMessage,
		updateBootShareMessage
	];
	var currentSubTask = 0, $, shareMessage, storyUrl;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		model = require('model');
		$ = $ || model.$;
		var $el = $('.toolholder');

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/
		// model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);

		/*---------------
			Things to do:
			 * Do stuff
		---------------*/

		taskFlow[0]();

	}
	this.go = go;

	function checkRequireLoaderBootScriptExists() {

		var bootjsPath = model.localAssetsPath + model.jsPath + "/boot.js";
		var outputDir = model.outputFolderPath + "/static/build/js";

		//check to see if the file exists, if not copy it over!
		if (!fs.existsSync(outputDir + "/boot.js")) {
			//copy the istats lib into the new lib directory
			ncp(bootjsPath, outputDir + "/boot.js", function (err) {
				if (err) {
					return console.error("copy error: ", err);
				}

				subTaskComplete();
			});
		}
		else {
			subTaskComplete();
		}
	}

	function checkRequireLibExists() {
		var requireLibPath = model.localAssetsPath + model.jsLibPath + "/require.js";
		var outputDir = model.outputFolderPath + "/lib";

		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}

		//check to see if the file exists, if not copy it over!
		if (!fs.existsSync(outputDir + "/require.js")) {
			//copy the require lib into the new lib directory
			ncp(requireLibPath, outputDir + "/require.js", function (err) {
				if (err) {
					return console.error("copy error: ", err);
				}

				subTaskComplete();

			});
		}
		else {
			subTaskComplete();
		}
	}

	function copyEventEmitterLib() {
		var emitterLibPath = model.localAssetsPath + model.jsLibPath + "/event_emitter.js";
		var outputDir = model.outputFolderPath + "/lib";
		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}

		//copy the require lib into the new lib directory
		ncp(emitterLibPath, outputDir + "/event_emitter.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			subTaskComplete();

		});
	}

	function copyBootstrap() {
		var bootjsPath = model.localAssetsPath + model.jsPath + "/bootstrap.js";
		var outputDir = model.outputFolderPath + "/static/build/js";

		//copy the istats lib into the new lib directory
		ncp(bootjsPath, outputDir + "/bootstrap.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			subTaskComplete();
		});
	}

	function copyUnderscore() {
		var bootjsPath = model.localAssetsPath + model.jsPath + "/underscore-1.8.3.js";
		var outputDir = model.outputFolderPath + "/static/build/js";

		//copy the istats lib into the new lib directory
		ncp(bootjsPath, outputDir + "/underscore-1.8.3.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			subTaskComplete();
		});
	}

	//copyModel, copyView
	function copyModel() {
		var bootjsPath = model.localAssetsPath + model.jsPath + "/nsshare-model.js";
		var outputDir = model.outputFolderPath + "/static/build/js";

		//copy the istats lib into the new lib directory
		ncp(bootjsPath, outputDir + "/nsshare-model.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			if (model.bbcVideosExist) {
				readModuleFile(outputDir + "/nsshare-model.js", function (err, scriptStr) {
					if (err) {
						console.log("err = ", err);
					}
					scriptStr = scriptStr.strReplace("define(['bootstrap'", "define(['static/build/js/bootstrap'");
					writeOutFile(outputDir + "/nsshare-model.js", scriptStr, subTaskComplete);
				});
			}
			else {
				subTaskComplete();
			}
		});
	}

	function copyView() {
		var bootjsPath = model.localAssetsPath + model.jsPath + "/nsshare-view.js";
		var outputDir = model.outputFolderPath + "/static/build/js";

		//copy the istats lib into the new lib directory
		ncp(bootjsPath, outputDir + "/nsshare-view.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			if (model.bbcVideosExist) {
				readModuleFile(outputDir + "/nsshare-view.js", function (err, scriptStr) {
					if (err) {
						console.log("err = ", err);
					}
					scriptStr = scriptStr.strReplace("define(['bootstrap'", "define(['static/build/js/bootstrap'");
					writeOutFile(outputDir + "/nsshare-view.js", scriptStr, subTaskComplete);
				});
			}
			else {
				subTaskComplete();
			}
		});
	}

	function editBootScript() {
		var bootScriptPath = model.outputFolderPath + "/static/build/js/boot.js";

		readModuleFile(bootScriptPath, function (err, bootScriptStr) {
			if (err) {
				console.log("err = ", err);
			}

			var defineOrRequire = (model.bbcVideosExist) ? "require([" : "define([";
			if (model.bbcVideosExist) {
				bootScriptStr = bootScriptStr.strReplace("define([", "require([");
			}

			//add path to define arr
			var defienArrStartIndex = bootScriptStr.indexOf(defineOrRequire), defineArrEndIndex = bootScriptStr.indexOf("]", defienArrStartIndex);
			var defineStr = bootScriptStr.substring(defienArrStartIndex + defineOrRequire.length, defineArrEndIndex);

			var moduleRootPath = (model.bbcVideosExist) ? "static/build/js/" : "";

			var istatsPathStr = (defineStr.length) ? ", '" + moduleRootPath + "bootstrap', '" + moduleRootPath + "nsshare-model', '" + moduleRootPath + "nsshare-view'" : "'" + moduleRootPath + "bootstrap', '" + moduleRootPath + "nsshare-model', '" + moduleRootPath + "nsshare-view'";
			defineStr += istatsPathStr;

			var defineStrPlusDeclaration = bootScriptStr.substring(defienArrStartIndex, defineArrEndIndex);

			bootScriptStr = bootScriptStr.strReplace(defineStrPlusDeclaration, defineOrRequire + defineStr);

			//add the share params to the function declaration
			var funcDecStartIndex = bootScriptStr.indexOf("function ("), functionDecEndIndex = bootScriptStr.indexOf(')', funcDecStartIndex);
			var funcParamsStr = bootScriptStr.substring(funcDecStartIndex + 10, functionDecEndIndex);
			var paramsStr = (funcParamsStr.length) ? ", news, NSShareModel, NSShareView" : "news, NSShareModel, NSShareView";
			funcParamsStr += paramsStr;
			var funcDecAndParamsStr = bootScriptStr.substring(funcDecStartIndex, functionDecEndIndex);
			bootScriptStr = bootScriptStr.strReplace(funcDecAndParamsStr, "function (" + funcParamsStr);

			var shareToolsMarkupPath = model.localAssetsPath + model.markupPath + "/shareTools.js";
			var shareToolsInitStr = fs.readFileSync(shareToolsMarkupPath, 'utf8');

			bootScriptStr = bootScriptStr.strReplace("/***insert share tools here***/", shareToolsInitStr);

			writeOutFile(bootScriptPath, bootScriptStr, subTaskComplete);

		});
	}

	function updateIndexShareMessage() {

		var shareMessageHolder = "{{ SHARE_MESSAGE }}";
		var shareUrlHolder     = "{{ SHARE_URL }}";
		var shareImgHolder     = "{{ SHARE_IMG }}";
		
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			indexHtmlStr = indexHtmlStr.strReplace(shareMessageHolder, escape(model.shareMessage));
			indexHtmlStr = indexHtmlStr.strReplace(shareUrlHolder,     escape(model.shareUrl));
			indexHtmlStr = indexHtmlStr.strReplace(shareImgHolder,     model.shareImg);


			//write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', indexHtmlStr, subTaskComplete);

		});
	}

	function updateBootShareMessage() {

		var bootScriptPath     = model.outputFolderPath + "/static/build/js/boot.js";
		var shareMessageHolder = "{{ SHARE_MESSAGE }}";
		var shareUrlHolder     = "{{ SHARE_URL }}";
		var shareImgHolder     = "{{ SHARE_IMG }}";

		readModuleFile(bootScriptPath, function (err, bootScriptStr) {
			if (err) {
				console.log("err = ", err);
			}

			bootScriptStr = bootScriptStr.strReplace(shareMessageHolder, model.shareMessage);
			bootScriptStr = bootScriptStr.strReplace(shareUrlHolder,     escape(model.shareUrl));
			bootScriptStr = bootScriptStr.strReplace(shareImgHolder,     model.shareImg);

			//write out the boot js string
			writeOutFile(bootScriptPath, bootScriptStr, subTaskComplete);

		});
	}

	function updateNSShareModelMessage() {
		var nsShareModelScriptPath = model.outputFolderPath + "/static/build/js/nsshare-model.js";

		readModuleFile(nsShareModelScriptPath, function (err, nsShareScriptStr) {
			if (err) {
				console.log("err = ", err);
			}

			//replace the story page url
			//var storyPageUrl = "www.bbc.co.uk/news/magazine-26354918";
			//storyUrl = storyUrl.strReplace("http://", "");
			//nsShareScriptStr = nsShareScriptStr.strReplace(storyPageUrl, storyUrl);

			//write out the nsshare-model js string
			writeOutFile(nsShareModelScriptPath, nsShareScriptStr, subTaskComplete);

		});
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "error witing file: " + filePath);
		}
		else {
			callback();
		}
	});
}

}

module.exports = new AddShareToolsTask();