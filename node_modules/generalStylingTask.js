var fs = require('fs'),
cheerio = require('cheerio'),
model = require('model');
 
function GeneralStylingTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [
		removeUppercaseFromHtml,
		removeUppercaseFromCss,
		changeFontStackAndLineHeightInHtml,
		changeFontStackandLineHeightInCss,
		changeTitleFontWeightInHtml,
		changeTitleFontSizes,
		changeSubTitleFontSizes,
		changeBodyFontSize,
		changeRightSideImgsTopPadding
	];
	var currentSubTask = 0;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		taskFlow[0]();

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/
		// model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);

		console.log("TODO general stying task: increase the top margin of the pictures on the right hand side so that they don't sit behind the top nav. Change the responsive sizes of the story sub title (done hacky in changeSubTitleFontSizes funcitno at the mo)");

	}
	this.go = go;

	function removeUppercaseFromHtml() {
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var upperCaseReplaceStr = "text-transform: uppercase;";
			indexHtmlStr = indexHtmlStr.strReplace(upperCaseReplaceStr);

			//write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', indexHtmlStr, subTaskComplete);

		});
	}

	function removeUppercaseFromCss() {
		var cssFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
		readModuleFile(cssFilePath, function (err, cssStr) {
			if (err) {
				console.log("err = ", err);
			}

			var upperCaseReplaceStr = "text-transform:uppercase";
			cssStr = cssStr.strReplace(upperCaseReplaceStr);

			//write out the index string
			writeOutFile(cssFilePath, cssStr, subTaskComplete);

		});
	}

	function changeFontStackAndLineHeightInHtml() {
		//'gill_sans_mtregular', Arial, sans-serif
		//Helmet, Freesans, Helvetica, Arial, sans-serif
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var fontStackReplaceStrs = [
				"'gill_sans_mtregular', Arial, sans-serif",
				"\"Gill Sans MT\", \"Gill Sans\", Arial, Helmet, Freesans, sans-serif"
			];

			var replaceWith = "Helmet, Freesans, Helvetica, Arial, sans-serif";
			
			var a;
			for (a = 0; a < fontStackReplaceStrs.length; a++) {
				indexHtmlStr = indexHtmlStr.strReplace(fontStackReplaceStrs[a], replaceWith, "gi");
			}

			var lineHeightReplaceStr = "line-height: .9;";
			replaceWith = "line-height: 1.05;" +
							"\n\tfont-weight: bold;" +
							"\n\tletter-spacing: -0.0425em;";
			indexHtmlStr = indexHtmlStr.strReplace(lineHeightReplaceStr, replaceWith);

			//padding: 30px 30px 0 30px;
			var paddingReplaceStr = "padding: 30px 30px 0 30px;";
			replaceWith = "padding: 30px 30px 0.3em 30px;";
			indexHtmlStr = indexHtmlStr.strReplace(paddingReplaceStr, replaceWith);

			//write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', indexHtmlStr, subTaskComplete);

		});
	}

	function changeFontStackandLineHeightInCss() {
		var cssFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
		readModuleFile(cssFilePath, function (err, cssStr) {
			if (err) {
				console.log("err = ", err);
			}

			var fontStackReplaceStr1 = "'Open Sans',sans-serif";
			var fontStackReplaceStr2 = "'Open Sans'";
			var replaceWith = "Helmet, Freesans, Helvetica, Arial, sans-serif";
			
			cssStr = cssStr.strReplace(fontStackReplaceStr1, replaceWith);
			cssStr = cssStr.strReplace(fontStackReplaceStr2, replaceWith);

			var lineHeightReplaceStr = "line-height:1.5";
			replaceWith = "line-height:1.333333333";
			cssStr = cssStr.strReplace(lineHeightReplaceStr, replaceWith);

			//write out the index string
			writeOutFile(cssFilePath, cssStr, subTaskComplete);

		});
	}

	function changeTitleFontWeightInHtml() {
		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var regex = /.section-title .story-title {/g;
			var result = indexHtmlStr.match(regex);

			if (!result) {
				subTaskComplete();
				return;
			}

			var a, matchLength = result.length, indexOfClassArr = [], indexOfFontWeightArr = [];
			for (a = 0; a < matchLength; a++) {
				var prevIndex = indexOfClassArr[indexOfClassArr.length - 1] || 0;
				
				var matchIndex = indexHtmlStr.indexOf(".section-title .story-title {", prevIndex + 1);
				indexOfClassArr.unshift(matchIndex);

				var fontWeightMatch = indexHtmlStr.indexOf("font-weight: normal;", matchIndex);
				var closingBracketMatch = indexHtmlStr.indexOf("}", matchIndex);

				if (fontWeightMatch > matchIndex && fontWeightMatch < closingBracketMatch) {
					indexOfFontWeightArr.unshift(fontWeightMatch);
				}
			}

			for (a = 0; a < indexOfFontWeightArr.length; a++) {
				var beforeStr = indexHtmlStr.substring(0, indexOfFontWeightArr);
				var afterStr = indexHtmlStr.substring(indexOfFontWeightArr[a] + 20, indexHtmlStr.length);
				indexHtmlStr = beforeStr + "font-weight: bold;" + afterStr;
			}

			var addNewClass = ".story-heading {\n" +
									"\tfont-weight: normal !important;\n" +
								"}\n";
			var addClassBeforeString = ".section-title .story-metadata {";
			var indexBefore = indexHtmlStr.indexOf(addClassBeforeString);
			indexHtmlStr = indexHtmlStr.substring(0, indexBefore) + addNewClass + indexHtmlStr.substring(indexBefore, indexHtmlStr.length);


			//write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', indexHtmlStr, subTaskComplete);

		});
	}

	function changeTitleFontSizes() {
		//blanket replace the values with ones we have choosen!!
		var cssFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
		readModuleFile(cssFilePath, function (err, cssStr) {
			if (err) {
				console.log("err = ", err);
			}

			var a, arrLength = model.titleFontSizeChanges.length;
			for (a = 0; a < arrLength; a++) {
				cssStr = cssStr.strReplace(model.titleFontSizeChanges[a].from, model.titleFontSizeChanges[a].to);
			}

			//write out the index string
			writeOutFile(cssFilePath, cssStr, subTaskComplete);

		});

	}

	function changeSubTitleFontSizes() {
		var cssFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
		readModuleFile(cssFilePath, function (err, cssStr) {
			var replaceStr = "font-size:30px";
			var replaceWithStr = "font-size:40px";
			cssStr = cssStr.strReplace(replaceStr, replaceWithStr);

			//write out the index string
			writeOutFile(cssFilePath, cssStr, subTaskComplete);
		});
	}

	function changeBodyFontSize() {

		var changeFontSizeStr = "font-size:20px";
		var targetFontSizeStr = "font-size:18px";
		var cssFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
		readModuleFile(cssFilePath, function (err, cssStr) {
			if (err) {
				console.log("err = ", err);
			}

			var regex = /.main-column{/g;
			var result = cssStr.match(regex);

			if (!result) {
				subTaskComplete();
				return;
			}
			var a, resultLength = result.length, currentMatchIndex = 0, matchIndexArr = [];
			for (a = 0; a < resultLength; a++) {
				var instanceOfClassName = cssStr.indexOf(".main-column{", currentMatchIndex);
				var nextInstanceOfbracket = cssStr.indexOf("}", instanceOfClassName);
				var indexOfFontSize = cssStr.indexOf(changeFontSizeStr, instanceOfClassName);
				if (indexOfFontSize < nextInstanceOfbracket) {
					matchIndexArr.unshift(indexOfFontSize);
				}
				currentMatchIndex = (instanceOfClassName + 1);
			}

			var arrLength = matchIndexArr.length;
			for (a = 0; a < arrLength; a++) {
				var beforeStr = cssStr.substring(0, matchIndexArr[a]);
				var afterStr = cssStr.substring(matchIndexArr[a] + changeFontSizeStr.length, cssStr.length);
				cssStr = beforeStr + targetFontSizeStr + afterStr;
			}
			
			//write out the index string
			writeOutFile(cssFilePath, cssStr, subTaskComplete);

		});
	}

	function changeRightSideImgsTopPadding() {
		var cssFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
		readModuleFile(cssFilePath, function (err, cssStr) {
			var replaceStr = "padding-top:40px";
			var replaceWithStr = "padding-top:60px";
			cssStr = cssStr.strReplace(replaceStr, replaceWithStr);

			//write out the index string
			writeOutFile(cssFilePath, cssStr, subTaskComplete);
		});
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
		fs.writeFile(filePath, fileContents, function(fileWriteErr) {
			if (fileWriteErr) {
				model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't remove google analytics fromt the project");
			}
			else {
				callback();
			}
		});
	}

}
 
module.exports = new GeneralStylingTask();