var fs = require('fs'),
cheerio = require('cheerio'),
model = require('model'),
ncp = require('ncp');
 
function BbcHeaderTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [edditCss, hideTopHeader, addBbcLogo];
	var currentSubTask = 0;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/

		/*---------------
			Things to do:
			 * add css classes to the main css file
			 	* hideMainHeader { height:0; visibility:hidden; }
			 * if the div with an id name of "header-{num}" exists then add some inline css to set the height to 0
			 * if the div with the class "section-navigation" exists then add the bbc logo and the 'NEWS' string next to it to the left hand side of the div
			 	* img src = http://static.bbci.co.uk/frameworks/barlesque/2.59.12/orb/4/img/bbc-blocks-light.png
			 	* img css = float:left; padding:10px;
		---------------*/

		taskFlow[0]();

		console.log("TODO in the bbcHeader task: style the header properly for different break points!");

	}
	this.go = go;

	function edditCss() {
		var cssFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
		
		var newClassesToAdd = [
			".hideMainHeader{height:0;visibility:hidden;}",
			".bbcTopLogo{float:left;margin:8px 0 0 8px;line-height:24px;}",
			".bbcTopLogo img{float:left;}",
			".section-navigation .bbcTopLogo a{padding:0;line-height:normal;-moz-opacity:1;-khtml-opacity:1;-webkit-opacity:1;opacity:1;-ms-filter:progid:DXImageTransform.Microsoft.Alpha(opacity=100);filter:alpha(opacity=100);}",
		];

		var cssChanges = [
			{
				hook:"section-navigation",
				editRules: [
					{
						rule: "position",
						val: 'fixed'
					},
					{
						rule: "top",
						val: 0
					},
					{
						rule: "min-height",
						val: '40px'
					}
				],
				removeRules: []
			},
			{
				hook:"section-navigation a,.section-navigation a:visited",
				editRules: [
					{
						rule: "line-height",
						val: '37px'
					}
				],
				removeRules: []
			}
		];
		
		readModuleFile(cssFilePath, function (err, cssStr) {
			
			/*----------------------
				ADD CLASSES
			-----------------------*/
			var a, arrLength = newClassesToAdd.length;
			for (a = 0; a < arrLength; a++) {
				cssStr += newClassesToAdd[a];
			}

			/*----------------------
				EDIT/REMOVE CLASSES
			-----------------------*/
			arrLength = cssChanges.length;
			for (a = 0; a < arrLength; a++) {
				var className = cssChanges[a].hook;
				//find the class!
				var classStartIndex = cssStr.indexOf("." + className + "{");
				if (classStartIndex > -1) {
					var classEndIndex = cssStr.indexOf("}", classStartIndex) + 1;
					
					var beforeClassStr = cssStr.substr(0, classStartIndex);
					var classStr = cssStr.substring(classStartIndex, classEndIndex);
					var afterClassStr = cssStr.substring(classEndIndex, cssStr.length);

					//edit rules
					var b, editRuleArrLength = cssChanges[a].editRules.length;
					for (b = 0; b < editRuleArrLength; b++) {
						var ruleObj = cssChanges[a].editRules[b];
						var ruleStartIndex = classStr.indexOf(ruleObj.rule);
						if (ruleStartIndex > -1) {
							var ruleEndIndex = classStr.indexOf(";", ruleStartIndex) + 1;
							var entireRuleStr = classStr.substring(ruleStartIndex, ruleEndIndex);
							var preferedruleStr = ruleObj.rule + ":" + ruleObj.val + ";";
							classStr = classStr.replace(entireRuleStr, preferedruleStr, "gi");
						}
						else {
							//looks like this is a new rule, lets create it and add it to the end of the class
							var classStrEndCut = classStr.substr(0, classStr.length - 1);
							classStr = classStrEndCut + ";" + ruleObj.rule + ":" + ruleObj.val + ";}";
						}
					}

					//delete rules
					var deleteRuleArrLength = cssChanges[a].removeRules.length;
					for (b = 0; b < deleteRuleArrLength; b++) {
						var deleteRuleName = cssChanges[a].removeRules[b];
						var deleteRuleStartIndex = classStr.indexOf(deleteRuleName);
						if (deleteRuleStartIndex > -1) {
							var deleteRuleEndindex = classStr.indexOf(";", deleteRuleStartIndex) + 1;
							var entireDeleteRuleStr = classStr.substring(deleteRuleStartIndex, deleteRuleEndindex);
							classStr = classStr.replace(entireDeleteRuleStr, '', "gi");
						}
					}

					cssStr = beforeClassStr + classStr + afterClassStr;
				}

			}

			//write out the css file
			writeOutFile(cssFilePath, cssStr, subTaskComplete);
		});
	}

	function hideTopHeader() {
		var htmlfilePath = model.outputFolderPath + '/index.html';
		readModuleFile(htmlfilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var $ = cheerio.load(indexHtmlStr);
			var headerPossibilities = $('[id^=header-]');


			//Loop through all the header tags in the page
			var a, arrLength = headerPossibilities.length;
			for (a = 0; a < arrLength; a++) {
				var headerClassName = headerPossibilities[a].attribs.class;
				var headerIdName = headerPossibilities[a].attribs.id;
				if (headerIdName && headerClassName) {
					var regcheck = /(header-\d+)/i;
					var regFound = headerIdName.match(regcheck);
					if (regFound) {
						//found the header div, now set it's css
						$(headerPossibilities[a]).addClass("hideMainHeader");
						//ideally I would like to remove this element using: // $(headerPossibilities[a]).remove();
						//but if you do that then it throws an error in the story js file about accessing property top of undefined

						//write out the html file
						writeOutFile(htmlfilePath, $.html(), subTaskComplete);
					}
				}
			}

		});
	}

	function addBbcLogo() {
		var navDefualtMarkup = "<nav class=\"section-navigation\">" +
									"<a href=\"#1-288\" class=\"section-navigator active\">Introduction</a>" +
									"<a href=\"#1-288\" class=\"section-navigator active\">Entering</a>" +
									"<a href=\"#1-288\" class=\"section-navigator active\">Lighting</a>" +
									"<a href=\"#1-288\" class=\"section-navigator active\">Beginning</a>" +
									"<a href=\"#1-288\" class=\"section-navigator active\">Meaning</a>" +
								"</nav>";
		
		//first check to see if the section-navigation nav tag exists!
		var htmlfilePath = model.outputFolderPath + '/index.html';
		readModuleFile(htmlfilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var $ = cheerio.load(indexHtmlStr);
			var sectionNavTag = $('.section-navigation');
			
			if (!sectionNavTag.length) {
				//the navigation tage does not already exist, lets create one!
				$('.sections-list').before(navDefualtMarkup);
				sectionNavTag = $('.section-navigation');
			}

			var logoMarkup = "<div class=\"bbcTopLogo\">" +
									"<a href=\"http://www.bbc.co.uk/news\" style=\"text-decoration:none\">" +
										"<img src=\"http://static.bbci.co.uk/frameworks/barlesque/2.59.12/orb/4/img/bbc-blocks-light.png\" alt=\"BBC\" width=\"84\" height=\"24\">" +
										"<span style=\"font-family:Arial;font-size:22px;color:white;margin-left:8px;line-height:normal;vertical-align:middle;\">NEWS</span>" +
									"</a>" +
								"</div>";
			$(sectionNavTag).prepend(logoMarkup);
			
			writeOutFile(htmlfilePath, $.html(), subTaskComplete);

		});

	}

	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't write to file: " + filePath);
		}
		else {
			callback();
		}
	});
}

}
 
module.exports = new BbcHeaderTask();