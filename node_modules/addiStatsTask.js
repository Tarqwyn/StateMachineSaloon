var fs = require('fs'),
cheerio = require('cheerio'),
ncp = require('ncp'),
cheerio = require('cheerio'),
model;
 
function AddiStatsTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	// var taskFlow = [copyRequireLib, copyIstatsLib, copyBootJs, addHtmlScript, addCallToStoryJs];
	var $, el;
	var taskFlow = [checkRequireLoaderBootScriptExists, checkRequireLibExists, copyIstatsLib, editBootScript, promptForCpsId, updateCpsId, addHtmlScript, addCallToStoryJs];
	var currentSubTask = 0;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		model = require('model');
		$ = $ || model.$;

		var $el = $('.toolholder');
		var cpsAssetId;

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/
		// model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);

		/*---------------
			Things to do:
			 * make a little require controller that loads istats and sets a global variable that can be accessed by the rest of the shorthand article (that isn't using amd modules)
				* copy the require library over to the shorthand article package
				* copy the istats library over
				* copy over the boot.js that require will load
				* add the require/boot script tag to the html file
				* TODO: pause the normal operation of the article until istats has loaded
			 * pause the article until istats has loaded and then re-initialise it again when ready
		---------------*/

		// http://static.bbci.co.uk/frameworks/requirejs/0.13.0/sharedmodules/require.js

		taskFlow[0]();

	}
	this.go = go;

	function checkRequireLoaderBootScriptExists() {
		var bootjsPath = model.localAssetsPath + model.jsPath + "/boot.js";
		var outputDir = model.outputFolderPath + "/static/js";

		//check to see if the file exists, if not copy it over!
		if (!fs.existsSync(outputDir + "/boot.js")) {
			//copy the istats lib into the new lib directory
			ncp(bootjsPath, outputDir + "/boot.js", function (err) {
				if (err) {
					return console.error("copy error: ", err);
				}

				subTaskComplete();
			});
		}
		else {
			subTaskComplete();
		}
	}

	function checkRequireLibExists() {
		var requireLibPath = model.localAssetsPath + model.jsLibPath + "/require.js";
		var outputDir = model.outputFolderPath + "/lib";

		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}

		//check to see if the file exists, if not copy it over!
		if (!fs.existsSync(outputDir + "/require.js") && !model.bbcVideosExist) {
			//copy the require lib into the new lib directory
			ncp(requireLibPath, outputDir + "/require.js", function (err) {
				if (err) {
					return console.error("copy error: ", err);
				}
				
				subTaskComplete();

			});
		}
		else {
			subTaskComplete();
		}
	}

	function copyIstatsLib() {
		var istatsLibPath = model.localAssetsPath + model.jsLibPath + "/istats.js";
		var outputDir = model.outputFolderPath + "/lib";
		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}
		
		//copy the istats lib into the new lib directory
		ncp(istatsLibPath, outputDir + "/istats.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			subTaskComplete();
		});
	}

	function editBootScript() {
		var bootScriptPath = model.outputFolderPath + "/static/js/boot.js";

		readModuleFile(bootScriptPath, function (err, bootScriptStr) {
			if (err) {
				console.log("err = ", err);
			}
			
			//first add the global istats var to the top of the file:
			var globalVarStr = "var istatsGlobal;";
			bootScriptStr = (globalVarStr + "\n\n") + bootScriptStr;

			var defineOrRequire = (model.bbcVideosExist) ? "require([" : "define([";
			if (model.bbcVideosExist) {
				bootScriptStr = bootScriptStr.strReplace("define([", "require([");
			}

			//add path to define arr
			var defienArrStartIndex = bootScriptStr.indexOf(defineOrRequire), defineArrEndIndex = bootScriptStr.indexOf("]", defienArrStartIndex);
			var defineStr = bootScriptStr.substring(defienArrStartIndex + defineOrRequire.length, defineArrEndIndex);

			var istatsPath = (model.bbcVideosExist) ? "'lib/istats'" : "'../../lib/istats'";

			var istatsPathStr = (defineStr.length) ? ", " + istatsPath : istatsPath;
			defineStr += istatsPathStr;

			var defineStrPlusDeclaration = bootScriptStr.substring(defienArrStartIndex, defineArrEndIndex);

			bootScriptStr = bootScriptStr.strReplace(defineStrPlusDeclaration, defineOrRequire + defineStr);

			//add the istats param to the functino declaration
			var funcDecStartIndex = bootScriptStr.indexOf("function ("), functionDecEndIndex = bootScriptStr.indexOf(')', funcDecStartIndex);
			var funcParamsStr = bootScriptStr.substring(funcDecStartIndex + 10, functionDecEndIndex);
			var istatsParamStr = (funcParamsStr.length) ? ", istats" : "istats";
			funcParamsStr += istatsParamStr;
			var funcDecAndParamsStr = bootScriptStr.substring(funcDecStartIndex, functionDecEndIndex);
			bootScriptStr = bootScriptStr.strReplace(funcDecAndParamsStr, "function (" + funcParamsStr);

			//add the defual istats ode in the boot script
			var istatsInitMarkupPath = model.localAssetsPath + model.markupPath + "/istatsInit.js";
			var istatsInitStr = fs.readFileSync(istatsInitMarkupPath, 'utf8');
			bootScriptStr = bootScriptStr.strReplace("/***insert istats here***/", istatsInitStr);

			writeOutFile(bootScriptPath, bootScriptStr, subTaskComplete);

		});
	}

	function promptForCpsId() {
		var promptMarkup = "<div class=\"userPromptHolder\">" +
								"<p>" +
									"<b>iStats cps asset id:</b>" +
									"<p>Please paste the cps asset id for the intistitial page.</br>For example, the asset id for the 'Arms wide open' story was: 26354918</p>" +
								"</p>" +
								"<input id='cpsAssetId' type='text' value='27290883' style='display:block;'/>" +
								"<button id='cpsAssetIdButton' type='submit'>" +
								"<p>ok</p>" +
								"</button>" +
							"</div>";

		var alertHolder = $el.append(promptMarkup);

		$('#cpsAssetIdButton').on('click', cpsAssetIdBtnClickHandler);
	}

	function cpsAssetIdBtnClickHandler(e) {
		cpsAssetId = $('#cpsAssetId').val();

		//remove the prompt window
		$('.userPromptHolder').remove();

		subTaskComplete();
	}

	function updateCpsId() {
		var bootScriptPath = model.outputFolderPath + "/static/js/boot.js";

		readModuleFile(bootScriptPath, function (err, bootScriptStr) {
			if (err) {
				console.log("err = ", err);
			}

			bootScriptStr = bootScriptStr.strReplace("27290883", cpsAssetId);

			writeOutFile(bootScriptPath, bootScriptStr, subTaskComplete);

		});
	}

	function addHtmlScript() {
		//check first to see if the script already exists

		var scriptStr = "<script data-main=\"static/js/boot\" src=\"lib/require.js\"></script>\n";
		var scriptStrWithVids = "<script type=\"text/javascript\" src=\"static/js/boot.js\"></script>\n";
		var whichScript = (model.bbcVideosExist) ? scriptStrWithVids : scriptStr;

		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			if (!indexHtmlStr.indexOf("lib/require.js") + 1) {
				var $ = cheerio.load(indexHtmlStr);
				//find the script tag for the story js file and the require/boot script tag on a line before that
				$('body').append(whichScript);
				//final index.html string output
				var indexFileOutputStr = $.html();
				//write out the index string
				writeOutFile(model.outputFolderPath + '/index.html', indexFileOutputStr, subTaskComplete);
			}
			else {
				//the require lib script has allready been added to the html file
				subTaskComplete();
			}
		});
	}

	function addCallToStoryJs() {

		var istatsMarkupPath = model.localAssetsPath + model.markupPath + "/istatsCall.js";
		var istatsCallStr = fs.readFileSync(istatsMarkupPath, 'utf8');
		
		var jsFilePath = model.outputFolderPath + '/static/js/story.' + model.projectNumber + '.js';

		readModuleFile(jsFilePath, function (err, storyJsStr) {
			var beforeStr = storyJsStr.substring(0, 18);
			var afterStr = storyJsStr.substring(18, storyJsStr.length);

			var storyJsOutputStr = beforeStr + istatsCallStr + afterStr;

			//write out the js file
			writeOutFile(jsFilePath, storyJsOutputStr, subTaskComplete);
		});
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't remove google analytics from the project");
		}
		else {
			callback();
		}
	});
}

}
 
module.exports = new AddiStatsTask();