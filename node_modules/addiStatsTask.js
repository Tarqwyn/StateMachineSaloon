var fs = require('fs'),
cheerio = require('cheerio'),
model = require('model'),
ncp = require('ncp'),
cheerio = require('cheerio');
 
function AddiStatsTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [copyRequireLib, copyIstatsLib, copyBootJs, addHtmlScript, addCallToStoryJs];
	var currentSubTask = 0;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/
		// model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);

		/*---------------
			Things to do:
			 * make a little require controller that loads istats and sets a global variable that can be accessed by the rest of the shorthand article (that isn't using amd modules)
				* copy the require library over to the shorthand article package
				* copy the istats library over
				* copy over the boot.js that require will load
				* add the require/boot script tag to the html file
				* TODO: pause the normal operation of the article until istats has loaded
			 * pause the article until istats has loaded and then re-initialise it again when ready
		---------------*/

		taskFlow[0]();

	}
	this.go = go;

	function copyRequireLib() {
		var requireLibPath = model.localAssetsPath + model.jsLibPath + "/require.js";
		var outputDir = model.outputFolderPath + "/lib";
		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}
		
		//copy the require lib into the new lib directory
		ncp(requireLibPath, outputDir + "/require.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}
			
			subTaskComplete();

		});
	}

	function copyIstatsLib() {
		var istatsLibPath = model.localAssetsPath + model.jsLibPath + "/istats.js";
		var outputDir = model.outputFolderPath + "/lib";
		//make the lib directory
		if (!fs.existsSync(outputDir)) {
			fs.mkdirSync(outputDir);
		}
		
		//copy the istats lib into the new lib directory
		ncp(istatsLibPath, outputDir + "/istats.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			subTaskComplete();
		});
	}

	function copyBootJs() {
		var bootjsPath = model.localAssetsPath + model.jsPath + "/boot.js";
		var outputDir = model.outputFolderPath + "/static/js";
		
		//copy the istats lib into the new lib directory
		ncp(bootjsPath, outputDir + "/boot.js", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}

			subTaskComplete();
		});
	}

	function addHtmlScript() {
		var scriptStr = "<script data-main=\"static/js/boot\" src=\"lib/require.js\"></script>\n";

		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			var $ = cheerio.load(indexHtmlStr);
			//find the script tag for the story js file and the require/boot script tag on a line before that
			$('body').append(scriptStr);
			//final index.html string output
			var indexFileOutputStr = $.html();
			//write out the index string
			writeOutFile(model.outputFolderPath + '/index.html', indexFileOutputStr, subTaskComplete);

		});
		
	}

	function addCallToStoryJs() {

		var istatCallStr = "(function () {" +
								"'use strict';" +
								"$(function () {" +
									"var currentSectionNumber;" +
									"$('.section').each(function (i) {" +
										"$(this).scrollWatch().on('scroll', function (e) {" +
										"if (Math.abs(e.visibility) > .8) {" +
											"if (currentSectionNumber !== i) {" +
											"currentSectionNumber = i;" +
												"if (istatsGlobal) {" +
													"istatsGlobal.log(" +
														"'sectionView'," +
														"'shorthand.sectionView'," +
														"{" +
															"'time':Date.now()," +
															"'section': i" +
														"}" +
													");" +
													"}" +
												"}" +
											"}" +
										"})" +
									"})"  +
								"})" +
							"})();";
		
		var jsFilePath = model.outputFolderPath + '/static/js/story.' + model.projectNumber + '.js';

		readModuleFile(jsFilePath, function (err, storyJsStr) {
			var beforeStr = storyJsStr.substring(0, 12);
			console.log("beforeStr = ", beforeStr);
			var afterStr = storyJsStr.substring(12, storyJsStr.length);
			console.log("afterStr = ", afterStr.substring(0, 20));

			var storyJsOutputStr = beforeStr + istatCallStr + afterStr;

			//write out the js file
			writeOutFile(jsFilePath, storyJsOutputStr, subTaskComplete);
			// writeOutFile(jsFilePath, storyJsStr, subTaskComplete);
		});
	}

	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't remove google analytics from the project");
		}
		else {
			callback();
		}
	});
}

}
 
module.exports = new AddiStatsTask();