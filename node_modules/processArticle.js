var fs = require('fs'),
model = require('model');
 
function ProcessArticle() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var $ = model.$, el;
	var currentTaskItt;
	var MView = {
		"selectedOptions": []
	};
	//mustache.js

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {
		$ = $ || model.$;

		$el = $('.toolholder');

		/*---------------
			Strings
		---------------*/
		var titleStr = "ShortHand repurposing tool";
		var currentTaskId;

		/*---------------
			Dom stuff
		---------------*/
		var appTitle = $('.appTitle');
		appTitle.html(titleStr);

		$el.empty();

		$el.load("../html/screens/processingArticle.html", screenHtmlLoaded);
	}
	this.go = go;

	function screenHtmlLoaded() {

		var a, arrLength = model.setableOptionsArr.length;
		for (a = 0; a < arrLength; a++) {
			if (model.setableOptionsArr[a].checked) {
				MView.selectedOptions.push({name: model.setableOptionsArr[a].taskName + " -- pending", id: model.setableOptionsArr[a].id});
			}
			//update the processTasks array in the model with the checked value from the setableOptionsArr array
			var b, arrLengthb = model.processTasks.length;
			for (b = 0; b < arrLengthb; b++) {
				if (model.setableOptionsArr[a].id === model.processTasks[b].id) {
					model.processTasks[b].checked = (model.setableOptionsArr[a].checked) ? "checked" : "";
				}
			}
		}

		var MOutput = model.Mustache.render($el[0].innerHTML, MView);
		$el[0].innerHTML = MOutput;
		
		publishNextTaskState();

		/*---------------
			Listeners
		---------------*/
		model.eventEmitter.addListener(model.emitterEvents.ARTICLE_TASK_COMPLETE, handleTaskComplete);
	}

	function publishNextTaskState() {
		//Find the first process task to complete
		arrLength = model.processTasks.length;
		var taskObj;
		for (a = 0; a < arrLength; a++) {
			if (model.processTasks[a].checked) {
				taskObj = model.processTasks[a];
				currentTaskId = taskObj.id;
				model.processTasks.splice(a, 1);
				break;
			}
		}

		if (taskObj) {
			model.stateMachine.publishStateChange(taskObj.stateName);
		}
		else {
			//looks like we've reached the end of the article tasks!
		}
	}

	/*------------------------------------------------------------------
		EVENT HANDLERS
	------------------------------------------------------------------*/
	function handleTaskComplete() {
		var completePEl = $('#' + currentTaskId), htmlStr = completePEl.html();
		htmlStr = htmlStr.replace("-- pending", "<span class=\"taskCompleteP\">-- complete</span>");
		completePEl.html(htmlStr);

		publishNextTaskState();

	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/

}
 
module.exports = new ProcessArticle();