var fs = require('fs'),
model = require('model'),
removeGoogleAnalyticsTask = require('removeGoogleAnalyticsTask'),
addiStatsTask = require('addiStatsTask'),
bbcHeaderTask = require('bbcHeaderTask'),
bbcFooterTask = require('bbcFooterTask'),
responsiveImagesTask = require('responsiveImagesTask'),
generalStylingTask = require('generalStylingTask'),
organiseCssTask = require('organiseCssTask'),
copyResponsivePolyfillTask = require('copyResponsivePolyfillTask');
 
function ProcessArticle() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var $ = model.$, el;
	var currentTaskItt;
	var MView = {
		"selectedOptions": []
	};
	//mustache.js

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {
		$ = $ || model.$;

		$el = $('.toolholder');

		/*---------------
			Strings
		---------------*/
		var titleStr = "ShortHand repurposing tool";

		/*---------------
			Dom stuff
		---------------*/
		var appTitle = $('.appTitle');
		appTitle.html(titleStr);

		$el.empty();

		$el.load("../html/screens/processingArticle.html", screenHtmlLoaded);
	}
	this.go = go;

	function screenHtmlLoaded() {

		var a, arrlength = model.setableOptionsArr.length;
		for (a = 0; a < arrlength; a++) {
			if (model.setableOptionsArr[a].checked) {
				MView.selectedOptions.push({name: model.setableOptionsArr[a].taskName + " -- pending", id: model.setableOptionsArr[a].id});
			}
		}
		MView.selectedOptions.push({name: "general styling -- pending", id: "generalStyling"});
		MView.selectedOptions.push({name: "copy media query polyfil -- pending", id: "copyResponsivePolyfill"});
		MView.selectedOptions.push({name: "organise css -- pending", id: "organiseCss"});

		var MOutput = model.Mustache.render($el[0].innerHTML, MView);
		$el[0].innerHTML = MOutput;

		currentTaskItt = 0;
		runTask();
		
		
		// console.log("model.optionsObj.googleAnalyticsCheckbox = ", model.optionsObj.googleAnalyticsCheckbox);
		// console.log("model.optionsObj.istatsCheckbox = ", model.optionsObj.istatsCheckbox);
		// console.log("model.optionsObj.bbcheaderCheckbox = ", model.optionsObj.bbcheaderCheckbox);
		// console.log("model.optionsObj.bbcfooterCheckbox = ", model.optionsObj.bbcfooterCheckbox);
		// console.log("model.optionsObj.responsiveImagesCheckbox = ", model.optionsObj.responsiveImagesCheckbox);
		// console.log("model.optionsObj.bbcVideoCheckbox = ", model.optionsObj.bbcVideoCheckbox);
		// console.log("model.optionsObj.clickThroughCheckbox = ", model.optionsObj.clickThroughCheckbox);

		//model.stateMachine.publishStateChange(model.appStates.CHECK_SHORTHAND_FOLDER, $(this).val());

		/*---------------
			Listeners
		---------------*/
		model.eventEmitter.addListener(model.emitterEvents.ARTICLE_TASK_COMPLETE, handleTaskComplete);
	}

	function runTask() {
		var taskObj = MView.selectedOptions[currentTaskItt];
		if (taskObj) {
			switch(taskObj.id) {
				case "googleAnalyticsCheckbox":
					//init the google analytics module
					removeGoogleAnalyticsTask.go();
				break;
				case "istatsCheckbox":
					//init the istatsCheckbox module
					addiStatsTask.go();
				break;
				case "bbcheaderCheckbox":
					//init the bbcheaderCheckbox module
					bbcHeaderTask.go();
				break;
				case "bbcfooterCheckbox":
					//init the bbcfooterCheckbox module
					bbcFooterTask.go();
				break;
				case "responsiveImagesCheckbox":
					//init the responsiveImagesCheckbox module
					responsiveImagesTask.go();
				break;
				case "bbcVideoCheckbox":
					console.log("do the bbc video task");
					//init the bbcVideoCheckbox module
					model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
				break;
				case "clickThroughCheckbox":
					console.log("do the click through task");
					//init the clickThroughCheckbox module
					model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
				break;
				case "generalStyling":
					//init the general styling module
					generalStylingTask.go();
				break;
				case "copyResponsivePolyfill":
					copyResponsivePolyfillTask.go();
				break;
				case "organiseCss":
					organiseCssTask.go();
				break;
			}
		}
	}

	/*------------------------------------------------------------------
		EVENT HANDLERS
	------------------------------------------------------------------*/
	function handleTaskComplete() {
		//model.setableOptionsArr[a].id
		var completePEl = $('#' + MView.selectedOptions[currentTaskItt].id), htmlStr = completePEl.html();
		htmlStr = htmlStr.replace("-- pending", "<span class=\"taskCompleteP\">-- complete</span>");
		completePEl.html(htmlStr);

		currentTaskItt ++;
		runTask();
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/

}
 
module.exports = new ProcessArticle();