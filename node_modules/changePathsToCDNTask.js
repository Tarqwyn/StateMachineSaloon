var fs = require('fs'),
ncp = require('ncp'),
cheerio = require('cheerio'),
model;
 
function ChangePathsToCDNTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [setYearAndTicketAndEnv, replaceCSSPaths, replaceJSPaths, replaceImagePaths, replaceMRPaths, replaceBootPaths, updateBootDefine, replaceShareViewPaths, replaceShareModelPaths, replaceBootstrapPaths, replaceStoryPaths, replaceCSSFontPaths, replaceCSSImgPaths, copyNewsImage, removeCachingVideoReferences, breakCacheToAssets];
	var currentSubTask = 0;
	var environ;
	var $;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		model = require('model');
		$ = $ || model.$;
		var $el = $('.toolholder');


		taskFlow[0]();

	}
	this.go = go;

	function setYearAndTicketAndEnv() {

		model.promptUserForJiraNumber();
		model.promptUserForYearPublished();
		environ = envMapping(model.env);
		subTaskComplete();

	}

	function envMapping (env) {
		var mappings = {
			'live':  'http:\/\/news.bbcimg.co.uk',
            'stage': 'http:\/\/www.stage.bbc.co.uk',
            'test':  'http:\/\/www.test.newsonline.tc.nca.bbc.co.uk',
            'local': 'http:\/\/static.local.bbc.co.uk:1031'
		};
		return mappings[env];
	}

	function replaceCSSPaths() {
		replacePaths('static/build/css/', '/index.html', true);
	}

	function replaceJSPaths() {
		replacePaths('static/build/js/', '/index.html', true);
	}

	function replaceMRPaths() {
		console.log('boo');
		replacePaths('static/img/', '/index.html', true);
	}

	function replaceImagePaths() {
		replacePaths('media/', '/index.html', true);
	}

	function replaceBootPaths() {
		replaceStringInFile('boot.js', 'boot.js', model.outputFolderPath + '/index.html', function () {
			replacePaths('static/build/js/boot.js', '/index.html', false);
		});
	}

	function replaceCSSFontPaths() {
		var originalHtmlFilePath = model.outputFolderPath + '/static/build/css/common.min.css';
	
		readModuleFile(originalHtmlFilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			writeOutFile(model.outputFolderPath + '/static/build/css/common.min.css',
				replaceAll(
					indexHtmlStr, 
					'fonts',
					environ + '/news/special/' + model.yearPublished + '/newsspec_' + model.jiraNumber + '/static/fonts'
					), 
				subTaskComplete
				);
		});	
	}

	function replaceCSSImgPaths() {
		var originalHtmlFilePath = model.outputFolderPath + '/static/build/css/common.min.css';
	
		readModuleFile(originalHtmlFilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			writeOutFile(model.outputFolderPath + '/static/build/css/common.min.css',
				replaceAll(
					indexHtmlStr, 
					'/img',
					environ + '/news/special/' + model.yearPublished + '/newsspec_' + model.jiraNumber + '/static/img'
					), 
				subTaskComplete
				);
		});	
	}

	function copyNewsImage() {
		var iconPath = model.localAssetsPath + model.imagesPath + "/news.png";
		var iconOutputPath = model.outputFolderPath + "/static/img";
		
		ncp(iconPath, iconOutputPath + "/news.png", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}
			subTaskComplete();
		});
	}

	function updateBootDefine() {
		replaceDefines('/static/build/js/boot.js');
	}

	function replaceShareViewPaths() {
		replaceDefines('/static/build/js/nsshare-view.js');
	}

	function replaceShareModelPaths() {
		replaceDefines('/static/build/js/nsshare-model.js');
	}

	function replaceBootstrapPaths() {
		replaceDefines('/static/build/js/bootstrap.js');
	}

	function replaceStoryPaths() {
		replaceDefines('/static/build/js/story.min.js');
	}

	function replacePaths(pathString, fileName, root) {

		var prefix = "";
		if(root == true) {
			prefix = "./"
		}

		replaceStringInFile(
			prefix + pathString,
			environ + '/news/special/' + model.yearPublished + '/newsspec_' + model.jiraNumber + '/' + pathString,
			model.outputFolderPath + fileName,
			subTaskComplete
		);
	}

	function replaceStringInFile(stringToReplace, newString, pathToFile, callback) {
		readModuleFile(pathToFile, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
				console.log('attempting to alter: ' + stringToReplace);			
			}

			writeOutFile(
				pathToFile, 
				replaceAll(
					indexHtmlStr, 
					stringToReplace,
					newString
				), 
				callback
			);
		});	
	}

	function replaceDefines(path) {

		var originalHtmlFilePath = model.outputFolderPath + path;

		readModuleFile(originalHtmlFilePath, function (err, indexHtmlStr) {
			var paths = ['lib/istats', 'lib/event_emitter', 'static/build/js/bootstrap', 'static/build/js/nsshare-model', 'static/build/js/nsshare-view', 'static/build/js/underscore-1.8.3']
			if (err) {
				console.log("err = ", err);
			}
			for (var i = 0; i < paths.length; i++) {
				indexHtmlStr = indexHtmlStr.replace(
					paths[i],
					environ + '/news/special/' + model.yearPublished + '/newsspec_' + model.jiraNumber + '/' + paths[i] + '.js?v='+model.buildVersion
				);
			};
			writeOutFile(model.outputFolderPath + path,
				indexHtmlStr,
				subTaskComplete
			);
		});	
	}

	function removeCachingVideoReferences () {
		var shorthandWebPageLocation = model.outputFolderPath + '/index.html';
		readModuleFile(shorthandWebPageLocation, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			
			var jsFunctionAsString = fs.readFileSync(model.localAssetsPath + model.markupPath + "/removeVideoReferencesFromCache.html", 'utf8');

			writeOutFile(
				shorthandWebPageLocation, 
				stringInsertBefore(indexHtmlStr, jsFunctionAsString, "var AssetPreloader = {"),
				subTaskComplete
			);
		});	
	}

	function breakCacheToAssets () {
		var shorthandWebPageLocation = model.outputFolderPath + '/index.html';
		readModuleFile(shorthandWebPageLocation, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			
			indexHtmlStr = indexHtmlStr.strReplace('.js"', '.js?v=' + model.buildVersion + '"');
			indexHtmlStr = indexHtmlStr.strReplace('.css"', '.css?v=' + model.buildVersion + '"');

			writeOutFile(
				shorthandWebPageLocation, 
				indexHtmlStr,
				subTaskComplete
			);
		});	
	}

	function stringInsertBefore (string, stringToInsert, before) {
		return string.replace(before, stringToInsert + before)
	}

	function replaceAll(string, find, replace) {
  		return string.replace(new RegExp(escapeRegExp(find), 'g'), replace);
	}

	function escapeRegExp(string) {
    	return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
	}

	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
		fs.writeFile(filePath, fileContents, function(fileWriteErr) {
			if (fileWriteErr) {
				model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't write file " + filePath + " :s");
			}
			else {
				callback();
			}
		});
	}

}
 
module.exports = new ChangePathsToCDNTask();