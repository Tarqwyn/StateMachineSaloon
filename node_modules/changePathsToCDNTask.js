var fs = require('fs'),
ncp = require('ncp'),
cheerio = require('cheerio'),
model;
 
function ChangePathsToCDNTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	var taskFlow = [promptForYearAndTicket, replaceCSSPaths, replaceJSPaths, replaceImagePaths, replaceMRPaths, replaceBootPaths, updateBootDefine, replaceShareViewPaths, replaceShareModelPaths, replaceBootstrapPaths, replaceCSSFontPaths, replaceCSSImgPaths, copyNewsImage, removeCachingVideoReferences];
	var currentSubTask = 0;
	var year, ticket, environ;
	var $;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		model = require('model');
		$ = $ || model.$;
		var $el = $('.toolholder');


		taskFlow[0]();

	}
	this.go = go;

	function promptForYearAndTicket() {
		var promptMarkup = "<div class=\"userPromptHolder\">" +
								"<p>" +
									"<b>CDN Assets Paths</b>" +
									"<p>Please select the environment :s" +
									"<select id='environment'>" +
									"<option value='http:\/\/news.bbcimg.co.uk'>Live</option>" +
									"<option value='http:\/\/www.stage.bbc.co.uk'>Stage</option>" +
									"<option value='http:\/\/www.test.newsonline.tc.nca.bbc.co.uk'>Test</option>" +
									"<option value='http:\/\/static.local.bbc.co.uk:1031'>Local</option>" +	
									"</select>" +
									"</p>" +
									"<p>Please enter the current year" +
								"</p>" +
								"<input id='year' type='text' value='2014' style='display:block;'/>" +
								"<p>" +
									"<p>Please enter the Newsspec ticket number i.e 7419</p>" +
								"</p>" +
								"<input id='newsspec' type='text' value='7419' style='display:block;'/>" +
								"<button id='promptOkButton' type='submit'>" +
								"<p>ok</p>" +
								"</button>" +
							"</div>";

		var alertHolder = $el.append(promptMarkup);

		$('#promptOkButton').on('click', promptOkBtnClickHandler);
	}

	function promptOkBtnClickHandler(e) {
		year = $('#year').val();
		ticket = $('#newsspec').val();
		environ = $('#environment').val();

		//remove the prompt window
		$('.userPromptHolder').remove();

		subTaskComplete();
	}

	function replaceCSSPaths() {
		replacePaths('static/css/', '/index.html', true);
	}

	function replaceJSPaths() {
		replacePaths('static/js/', '/index.html', true);
	}

	function replaceMRPaths() {
		console.log('boo');
		replacePaths('static/img/', '/index.html', true);
	}

	function replaceImagePaths() {
		replacePaths('media/', '/index.html', true);
	}

	function replaceBootPaths() {
		replacePaths('static/js/boot', '/index.html', false);
	}

	function replaceCSSFontPaths() {
		var originalHtmlFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
	
		readModuleFile(originalHtmlFilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			writeOutFile(model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css',
				replaceAll(
					indexHtmlStr, 
					'fonts',
					environ + '/news/special/' + year + '/newsspec_' + ticket + '/static/fonts'
					), 
				subTaskComplete
				);
		});	
	}

	function replaceCSSImgPaths() {
		var originalHtmlFilePath = model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css';
	
		readModuleFile(originalHtmlFilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			writeOutFile(model.outputFolderPath + '/static/css/common.' + model.projectNumber + '.css',
				replaceAll(
					indexHtmlStr, 
					'/img',
					environ + '/news/special/' + year + '/newsspec_' + ticket + '/static/img'
					), 
				subTaskComplete
				);
		});	
	}

	function copyNewsImage() {
		var iconPath = model.localAssetsPath + model.imagesPath + "/news.png";
		var iconOutputPath = model.outputFolderPath + "/static/img";
		
		ncp(iconPath, iconOutputPath + "/news.png", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}
			subTaskComplete();
		});
	}

	function updateBootDefine() {
		replaceDefines('/static/js/boot.js');
	}

	function replaceShareViewPaths() {
		replaceDefines('/static/js/nsshare-view.js');
	}

	function replaceShareModelPaths() {
		replaceDefines('/static/js/nsshare-model.js');
	}

	function replaceBootstrapPaths() {
		replaceDefines('/static/js/bootstrap.js');
	}

	function replacePaths(pathString, file, root) {
		var prefix = "",
			originalHtmlFilePath = model.outputFolderPath + file;
		if(root == true) {
			prefix = "./"
		}

		console.log(prefix + pathString);

		readModuleFile(originalHtmlFilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			writeOutFile(model.outputFolderPath + file, 
				replaceAll(
					indexHtmlStr, 
					prefix + pathString,
					environ + '/news/special/' + year + '/newsspec_' + ticket + '/' + pathString
					), 
				subTaskComplete
				);
		});	
	}

	function replaceDefines(path) {
		var originalHtmlFilePath = model.outputFolderPath + path;

		readModuleFile(originalHtmlFilePath, function (err, indexHtmlStr) {
			var paths = ['lib/istats', 'lib/event_emitter', 'static/js/bootstrap', 'static/js/nsshare-model', 'static/js/nsshare-view']
			if (err) {
				console.log("err = ", err);
			}
			for (var i = 0; i < paths.length; i++) {
				indexHtmlStr = indexHtmlStr.replace(
					paths[i],
					environ + '/news/special/' + year + '/newsspec_' + ticket + '/' + paths[i] + '.js'
					);
			};
			writeOutFile(model.outputFolderPath + path,
				indexHtmlStr,
				subTaskComplete
				);
		});	
	}

	function removeCachingVideoReferences () {
		var shorthandWebPageLocation = model.outputFolderPath + '/index.html';
		readModuleFile(shorthandWebPageLocation, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}
			
			var jsFunctionAsString = fs.readFileSync(model.localAssetsPath + model.markupPath + "/removeVideoReferencesFromCache.html", 'utf8');

			writeOutFile(
				shorthandWebPageLocation, 
				stringInsertBefore(indexHtmlStr, jsFunctionAsString, "var AssetPreloader = {"),
				subTaskComplete
			);
		});	
	}

	function stringInsertBefore (string, stringToInsert, before) {
		return string.replace(before, stringToInsert + before)
	}

	function replaceAll(string, find, replace) {
  		return string.replace(new RegExp(escapeRegExp(find), 'g'), replace);
	}

	function escapeRegExp(string) {
    	return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
	}

	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
		fs.writeFile(filePath, fileContents, function(fileWriteErr) {
			if (fileWriteErr) {
				model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't write file " + filePath + " :s");
			}
			else {
				callback();
			}
		});
	}

}
 
module.exports = new ChangePathsToCDNTask();