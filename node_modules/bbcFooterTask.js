var fs = require('fs'),
cheerio = require('cheerio'),
ncp = require('ncp'),
model;
 
function BbcFooterTask() {

	/*------------------------------------------------------------------
		Variables
	------------------------------------------------------------------*/
	// var taskFlow = [addCss, addStyleTagToHTML, addBbcFooterMarkup, copyMoreReadsImages];
	var taskFlow = [removeShorthandFooter, checkFooterExists, copyMoreReadsImages, addMoreReadsText];
	var currentSubTask = 0;
	var moreReadsImgcurrentIndex = 0;
	var moreReadsLength = 3;

	/*------------------------------------------------------------------
		Methods
	------------------------------------------------------------------*/
	function go() {

		/*---------------
			Strings
		---------------*/

		/*---------------
			Listeners
		---------------*/

		/*---------------
			Things to do:
			 * add css classes to the main css file
			 	* hideMainHeader { height:0; visibility:hidden; }
			 * if the div with an id name of "header-{num}" exists then add some inline css to set the height to 0
			 * if the div with the class "section-navigation" exists then add the bbc logo and the 'NEWS' string next to it to the left hand side of the div
			 	* img src = http://static.bbci.co.uk/frameworks/barlesque/2.59.12/orb/4/img/bbc-blocks-light.png
			 	* img css = float:left; padding:10px;
		---------------*/

		model = require('model');

		taskFlow[0]();

		console.log("TODO:create a user prompt to fill in the credits and add the more reads images and links. remove the right side border on small screen sizes. ADD THE SHARE TOOLS!");

	}
	this.go = go;

	function removeShorthandFooter() {

		var htmlfilePath = model.outputFolderPath + '/index.html';
		readModuleFile(htmlfilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var $ = cheerio.load(indexHtmlStr);

			var footerEl = $('.story-footer');
			if (footerEl) {
				footerEl.parent().remove();
				writeOutFile(htmlfilePath, $.html(), subTaskComplete);
			}

		});
	}

	function checkFooterExists() {

		var htmlfilePath = model.outputFolderPath + '/index.html';
		readModuleFile(htmlfilePath, function (err, indexHtmlStr) {
			if (err) {
				console.log("err = ", err);
			}

			var $ = cheerio.load(indexHtmlStr);

			var bbcFooterEl = $('.bbc_shorthand_footer');
			if (bbcFooterEl.length) {
				bbcFooterEl.remove();
			}

			var bbcFooterMoreEl = $('.bbc_shorthand_footer-more');
			if (bbcFooterMoreEl.length) {
				bbcFooterMoreEl.remove();
			}

			var bbcFooterOrbEl = $('#orb-footer');
			if (bbcFooterOrbEl.length) {
				bbcFooterOrbEl.remove();
			}

			var bbcFooterMarkupPath = model.localAssetsPath + model.markupPath + "/bbcFooter.html";
			var footerMarkup = fs.readFileSync(bbcFooterMarkupPath, 'utf8');
			var footerHolder = $('.sections-list');
			if (footerHolder.length) {
				$('.sections-list').append(footerMarkup);
				console.log("add the bbc footer to the story");
				writeOutFile(htmlfilePath, $.html(), subTaskComplete);
			}
			else {
				subTaskComplete();
			}

		});
	}

	function copyMoreReadsImages() {
		copyMoreReadsImage();
	}

	function copyMoreReadsImage() {
		var iconPath = model.localAssetsPath + model.imagesPath + "/morereads_" + (moreReadsImgcurrentIndex + 1) + ".jpg";
		var iconOutputPath = model.outputFolderPath + "/static/img";
		
		ncp(iconPath, iconOutputPath + "/morereads_" + (moreReadsImgcurrentIndex + 1) + ".jpg", function (err) {
			if (err) {
				return console.error("copy error: ", err);
			}
			moreReadsImgcurrentIndex ++;
			if (moreReadsImgcurrentIndex < moreReadsLength) {
				copyMoreReadsImage();
			}
			else {
				subTaskComplete();
			}
		});
	}

	function addMoreReadsText() {

		readModuleFile(model.outputFolderPath + '/index.html', function (err, indexHtmlStr) {

			if (err) {
				console.log(err);
				return;
			}

			indexHtmlStr = indexHtmlStr.strReplace('{{ YEAR }}', model.yearPublished);
			indexHtmlStr = indexHtmlStr.strReplace('{{ JIRA_NUMBER }}', model.jiraNumber);

			indexHtmlStr = indexHtmlStr.strReplace('{{ MORE_READS_HREF_1 }}', model.moreReads[0].href);
			indexHtmlStr = indexHtmlStr.strReplace('{{ MORE_READS_HREF_2 }}', model.moreReads[1].href);
			indexHtmlStr = indexHtmlStr.strReplace('{{ MORE_READS_HREF_3 }}', model.moreReads[2].href);

			indexHtmlStr = indexHtmlStr.strReplace('{{ MORE_READS_TEXT_1 }}', model.moreReads[0].text);
			indexHtmlStr = indexHtmlStr.strReplace('{{ MORE_READS_TEXT_2 }}', model.moreReads[1].text);
			indexHtmlStr = indexHtmlStr.strReplace('{{ MORE_READS_TEXT_3 }}', model.moreReads[2].text);

			writeOutFile(model.outputFolderPath + '/index.html', indexHtmlStr, subTaskComplete);

		});
	}

	function subTaskComplete() {
		currentSubTask ++;
		if (currentSubTask < taskFlow.length) {
			taskFlow[currentSubTask]();
		}
		else {
			taskComplete();
		}
	}

	function taskComplete() {
		model.eventEmitter.emitEvent(model.emitterEvents.ARTICLE_TASK_COMPLETE);
	}

	/*------------------------------------------------------------------
		UTILITIES
	------------------------------------------------------------------*/
	function readModuleFile(path, callback) {
		try {
			var filename = require.resolve(path);
			fs.readFile(filename, 'utf8', callback);
		} catch (e) {
			callback(e);
		}
	}

	function writeOutFile(filePath, fileContents, callback) {
	fs.writeFile(filePath, fileContents, function(fileWriteErr) {
		if (fileWriteErr) {
			console.log(fileWriteErr);
			model.stateMachine.publishStateChange(model.appStates.ERROR_STATE, "couldn't write to file: " + filePath);
		}
		else {
			callback();
		}
	});
}

}
 
module.exports = new BbcFooterTask();